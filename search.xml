<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>flex布局</title>
      <link href="/2022/07/13/flex%E5%B8%83%E5%B1%80/"/>
      <url>/2022/07/13/flex%E5%B8%83%E5%B1%80/</url>
      
        <content type="html"><![CDATA[<h3 id="flex布局"><a href="#flex布局" class="headerlink" title="flex布局"></a>flex布局</h3><p>flex布局原理</p><p>flex是flexible Box的缩写 意为弹性布局,用来为盒状模型提供最大的灵活性,任何一个容器都可以指定为flex布局</p><p>-当我们为父盒子设为flex布局以后,子元素的float、clear和vertical-align属性将失效</p><p>-伸缩布局=弹性布局=伸缩盒布局=弹性盒布局=flex布局</p><p>通过给父盒子添加flex属性,来控制子盒子的位置和排列方式,大盒子叫容器,小盒子叫项目</p><p>常见父属性</p><p>felx-direction:设置主轴方向</p><p>主轴和侧轴 </p><p>默认主轴方向为x轴方向,水平向右</p><p>默认侧轴方向为y轴方向,水平向下</p><table><thead><tr><th align="center">属性值</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">row</td><td align="center">默认值从左到右</td></tr><tr><td align="center">row-reverse</td><td align="center">从右到左(会从右边顶头开始)</td></tr><tr><td align="center">column</td><td align="center">从上到下</td></tr><tr><td align="center">column-reverse</td><td align="center">从下到上</td></tr></tbody></table><p>可以理解为一个矩形, row从左上角到右上角,row-reverse从右上角到左上角,column从左上角到左下角,column-reverse从左下角到左上角,有空余不管</p><p>justify-content:设置<strong>主轴</strong>上的子元素排列方式</p><p>注意:使用这个属性之前一定要确定好主轴是哪个</p><table><thead><tr><th align="center">属性值</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">flex-start</td><td align="center">默认值从头部开始如果主轴是x轴,则从左到右</td></tr><tr><td align="center">flex-end</td><td align="center">从尾部开始排列(顺序不变)</td></tr><tr><td align="center">center</td><td align="center">在主轴居中对齐(如果主轴是x轴则水平居中)</td></tr><tr><td align="center">space-around</td><td align="center">平分剩余空间</td></tr><tr><td align="center">space-between</td><td align="center">先两边贴边再平分剩余空间</td></tr></tbody></table><p>flex-wrap:设置子元素是否换行(多行)</p><p>如果子元素太多会缩小元素大小</p><p>默认情况下,项目都拍在一条线上(“轴线”).flex-wrap属性定义,flex布局中默认是不换行的</p><table><thead><tr><th align="center">属性值</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">nowrap</td><td align="center">不换行</td></tr><tr><td align="center">wrap</td><td align="center">换行</td></tr></tbody></table><p>align-items:设置侧轴上的子元素排列方式(单行)</p><p>只有上对齐、下对齐、居中和拉伸</p><table><thead><tr><th align="center">属性值</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">flex-start</td><td align="center">默认值,从上到下</td></tr><tr><td align="center">flex-end</td><td align="center">从下到上</td></tr><tr><td align="center">center</td><td align="center">挤在一起居中(垂直居中)</td></tr><tr><td align="center">stretch</td><td align="center">拉伸(子盒子不要给高度)</td></tr></tbody></table><p>align-content:设置侧轴上的子元素排列方式(多行)</p><p>可以设置上对齐、下对齐、居中、拉伸以及平均分配剩余空间</p><p>对单行无效</p><p>单行找align-items多行找align-content </p><p>配合<code>flex-wrap:wrap</code>使用</p><table><thead><tr><th align="center">属性值</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">flex-start</td><td align="center">默认值从侧轴的头部开始排列</td></tr><tr><td align="center">flex-end</td><td align="center">在侧轴的尾部开始排列(顺序不变)</td></tr><tr><td align="center">center</td><td align="center">在侧轴中间显示</td></tr><tr><td align="center">space-around</td><td align="center">子项在侧轴平分剩余空间</td></tr><tr><td align="center">space-between</td><td align="center">子项在侧轴先分布在两头,在平分剩余空间</td></tr><tr><td align="center">stretch</td><td align="center">设置子项元素高度平分父元素高度</td></tr></tbody></table><p>flex-flow:复合属性,相当于同事设置了flex-direction和flex-wrap</p><p>flex子项常见属性</p><p>flex子项目占的份数</p><p>align-self控制子项自己在<strong>侧轴</strong>的排列方式</p><p>​    align-items 的单个操作</p><p>order属性定义子项的排列顺序(前后顺序)</p><p>​    order:number默认是0</p>]]></content>
      
      
      
        <tags>
            
            <tag> JS DOM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>npm常用命令(长期更新中...)</title>
      <link href="/2022/07/08/npm%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4(%E9%95%BF%E6%9C%9F%E6%9B%B4%E6%96%B0%E7%89%88)/"/>
      <url>/2022/07/08/npm%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4(%E9%95%BF%E6%9C%9F%E6%9B%B4%E6%96%B0%E7%89%88)/</url>
      
        <content type="html"><![CDATA[<p>常用命令</p><p><code>nvm install latest</code>：   安装最新的 <code>nodejs</code> 版本</p><p><code>nvm install 11.12.0</code>：  安装对应的 <code>nodejs</code> 版本</p><p><code>nvm uninstall 11.12.0</code>：卸载对应的 <code>nodejs</code> 版本</p><p><code>nvm list available</code>：   列出所有可用的 <code>nodejs</code> 版本</p><p><code>nvm list</code>：             查看 <code>nvm</code> 列出已经安装的 <code>nodejs</code> 版本</p><p><code>nvm use 11.12.0</code>：      使用对应的 <code>nodejs</code> 版本</p><p>更多命令在命令行输入 <code>nvm</code> 即可查看</p><p>清除缓存</p><p><code>npm cache clean -f</code></p><p>全局包文件</p><p><code>npm config get prefix</code></p><p>git 命令</p><p><code>git status</code>查看本地的更新内容</p><p> <code>git checkout</code>将远程分支检出到本地/从现在的分支去到哪个分支</p><p><code>git rm filename</code>删除指定filename文件</p><p><code>git add .</code>添加所有更新内容到分支上</p><p><code>git commit -m &quot;备注内容&quot;</code>添加备注</p><p><code>git pull</code>会更新所有本地分支与远程分支关联的分支内容</p><p><code>git branch -a</code>看一下具体有哪些分支(包括本地分支和远程分支)</p><p><code>git checkout-b dev orgin/dev</code>远程已有dev分支,将远程的dev分支关联到本地</p><p><code>git chenckout -b gjq</code>在本地创建一个gjq分支</p><p><code>git merge dev</code>将dev分支合并到本地自己所在的这个分支上(注意自己是在哪个分支)</p><p><code>git push --set-upstream origin gjq</code> 将代码提交并且将本地分支和远程分支关联</p><p>提交更新的内容到远程分支并合并自己的分支到dev分支上</p><p><code>git add .-&gt;git commit -m &quot;&quot;-&gt;git push-&gt;git chekout 分支-&gt;git merge gjq-&gt;git checkout dev</code></p>]]></content>
      
      
      
        <tags>
            
            <tag> npm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>typescript入门1.0</title>
      <link href="/2022/07/06/TypeScript/"/>
      <url>/2022/07/06/TypeScript/</url>
      
        <content type="html"><![CDATA[<h3 id="typescript"><a href="#typescript" class="headerlink" title="typescript"></a>typescript</h3><h4 id="1-历史"><a href="#1-历史" class="headerlink" title="1.历史"></a>1.历史</h4><p>可维护性大大提高,不利于维护大型项目,ts可以编译成任意版本的js,兼容性高</p><h4 id="2-基本类型"><a href="#2-基本类型" class="headerlink" title="2.基本类型"></a>2.基本类型</h4><p>声明变量类型let a:number;</p><p>vscode会自动检查类型问题并提示</p><p>ts可以自动进行类型推断</p><ol><li><p>number</p></li><li><p>string</p></li><li><p>boolean</p></li><li><p>字面量</p></li></ol><p>​        赋值一次就改不了</p><p>​        let b:”male”|”female”;</p><p>​    5.any</p><p>​        任意类型,一个变量设置类型any后相当于对该变量关闭TS的类型检测</p><p>​        声明变量如果不指定类型,则TS解析器会自动判断变量的类型为any(隐式any)</p><p>​        类型是any可以赋值给任意变量</p><p>​    6.unknown</p><p>​        未知类型的值,实际上是一个类型安全的any</p><p>​        无法赋值给任意变量</p><p>​    7.void</p><p>​        函数返回值为空</p><p>​    8.never</p><p>​        永远不会返回结果,报错函数常用</p><p>​    9.object</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">b</span>:&#123;<span class="attr">name</span>:string&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ​语法:&#123;属性名:属性值,属性名?:属性值,[propName:string]:any&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// ​属性名后加?表示可选属性</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// ​  [propName:string]:any表示任意类型的属性</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="attr">d</span>:<span class="function">(<span class="params">a:number,b:number</span>)=&gt;</span>number;</span><br><span class="line"></span><br><span class="line">d=<span class="keyword">function</span>(<span class="params">n1,n2</span>)&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> n1+n2</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​        设置函数结构的类型声明</p><p>​        语法:(形参:类型)=&gt;返回值类型</p><p>​    10.array</p><p>​        <code>string[]</code> <code>Array&lt;string&gt;</code>字符串数组</p><p>​        <code>number[]</code> <code>Array&lt;number&gt;</code>数值数组</p><p>​        数组的类型声明</p><p>​        类型[]</p><p>​        Array&lt;类型&gt;</p><p>​    11.tuple</p><p>​        元祖:固定长度的数组,存储效率好</p><p>​        语法:[类型,类型,类型]</p><p>​        <code>let h:[string,number];</code></p><p>​    12.enum<br>​        枚举:列举所有情况</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">​<span class="title class_">Enum</span> <span class="title class_">Gender</span>&#123;</span><br><span class="line">  ​<span class="title class_">Male</span>=<span class="number">0</span>,</span><br><span class="line">​  <span class="title class_">Female</span>=<span class="number">1</span></span><br><span class="line">​&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="attr">i</span>:&#123;<span class="attr">name</span>:string,<span class="attr">gender</span>:<span class="title class_">Gender</span>&#125;;</span><br><span class="line"></span><br><span class="line">i=&#123;</span><br><span class="line">​<span class="attr">name</span>:<span class="string">&#x27;孙悟空&#x27;</span></span><br><span class="line">​<span class="attr">gender</span>:<span class="title class_">Gender</span>.<span class="property">Male</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(i.<span class="property">gender</span>===<span class="title class_">Gender</span>.<span class="property">Male</span>);</span><br></pre></td></tr></table></figure><h4 id="3-类型断言-as"><a href="#3-类型断言-as" class="headerlink" title="3. 类型断言 as"></a>3. 类型断言 as</h4><p>可以用来告诉解析器变量的实际类型<br>语法<br>变量as类型<br>&lt;类型&gt;变量</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">s=e <span class="keyword">as</span> string;</span><br><span class="line"></span><br><span class="line">s=&lt;string&gt;e;</span><br></pre></td></tr></table></figure><p>&amp;表示同时</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">j</span>:&#123;<span class="attr">name</span>:string&#125;&amp;&#123;<span class="attr">age</span>:number&#125;;</span><br><span class="line">j=&#123;<span class="attr">name</span>:<span class="string">&#x27;孙悟空&#x27;</span>,<span class="attr">age</span>:<span class="number">18</span>&#125;;</span><br></pre></td></tr></table></figure><h4 id="4-类型别名"><a href="#4-类型别名" class="headerlink" title="4. 类型别名"></a>4. 类型别名</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">type myType=<span class="number">1</span>|<span class="number">2</span>|<span class="number">3</span>|<span class="number">4</span>|<span class="number">5</span>;</span><br><span class="line"><span class="keyword">let</span> <span class="attr">k</span>:myType;</span><br></pre></td></tr></table></figure><h4 id="5-编译选项"><a href="#5-编译选项" class="headerlink" title="5. 编译选项"></a>5. 编译选项</h4><p>文件目录下建立tsconfig.json   tsc</p><p>配置选项</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;include&quot;</span> 指定哪些ts文件需要被编译   </span><br><span class="line"> 路径 **表示任意目录  *表示任意文件`<span class="string">&quot;./src/**/*&quot;</span> `</span><br><span class="line"> </span><br><span class="line"><span class="string">&quot;exclude&quot;</span> 不需要被编译的文件</span><br><span class="line"><span class="string">&quot;extends&quot;</span> 继承配置文件</span><br><span class="line"><span class="string">&quot;files&quot;</span> 指定被编译文件的列表<span class="punctuation">,</span>只有需要编译的文件少时会用到</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;compilerOptions&quot;</span> <span class="punctuation">&#123;</span></span><br><span class="line"> <span class="attr">&quot;target&quot;</span><span class="punctuation">:</span><span class="string">&quot;es6&quot;</span>   <span class="comment">//用来指定ts被编译为的ES的版本 es3 es5 es6 es2015 es2016 es2017 es2018 es2019 es2020 esnext</span></span><br><span class="line"> <span class="attr">&quot;module&quot;</span><span class="punctuation">:</span><span class="string">&quot;es2015&quot;</span> <span class="comment">//指定使用的模块化的规范 none commonjs amd system umd es6 es2015 es2020 esnext</span></span><br><span class="line"> <span class="attr">&quot;lib&quot;</span><span class="punctuation">:</span><span class="punctuation">[</span><span class="punctuation">]</span> <span class="comment">//lib用来指定项目中要使用的库</span></span><br><span class="line"> <span class="attr">&quot;outDir&quot;</span><span class="punctuation">:</span><span class="string">&quot;&quot;</span> <span class="comment">//用来指定编译后文件所在的目录</span></span><br><span class="line"> <span class="attr">&quot;outFile&quot;</span><span class="punctuation">:</span><span class="string">&quot;&quot;</span> <span class="comment">//将代码合并为一个文件,设置后所有的全局作用域中的代码合并到同一文件中</span></span><br><span class="line"> <span class="attr">&quot;allowJs&quot;</span><span class="punctuation">:</span><span class="keyword">false</span><span class="comment">//是否对js文件进行编译</span></span><br><span class="line"> <span class="attr">&quot;checkJs&quot;</span><span class="punctuation">:</span><span class="keyword">false</span><span class="comment">//检查js代码是否符合语法规范,默认值false</span></span><br><span class="line"> <span class="attr">&quot;removeComments&quot;</span><span class="punctuation">:</span><span class="keyword">true</span><span class="comment">//是否移除注释</span></span><br><span class="line"> <span class="attr">&quot;noEmit&quot;</span><span class="punctuation">:</span><span class="keyword">true</span><span class="comment">//不生成编译后的文件(检查语法用)</span></span><br><span class="line"> <span class="attr">&quot;noEmitOnError&quot;</span><span class="punctuation">:</span><span class="keyword">true</span><span class="comment">//有错误时不生成编译后的文件</span></span><br><span class="line"></span><br><span class="line"> <span class="attr">&quot;strict&quot;</span><span class="punctuation">:</span><span class="keyword">true</span><span class="comment">//严格检查的总开关</span></span><br><span class="line"> <span class="attr">&quot;alwaysStrict&quot;</span><span class="punctuation">:</span><span class="keyword">false</span><span class="comment">//设置编译后文件是否使用严格模式 模块代码会自动进入严格模式</span></span><br><span class="line"> <span class="attr">&quot;noImplicitAny&quot;</span><span class="punctuation">:</span><span class="keyword">true</span><span class="comment">//不允许隐式any类型</span></span><br><span class="line"> <span class="attr">&quot;noImplicitThis&quot;</span><span class="punctuation">:</span><span class="keyword">true</span><span class="comment">//不允许不明确类型的this</span></span><br><span class="line"> <span class="attr">&quot;strictNullChecks&quot;</span><span class="punctuation">:</span><span class="keyword">false</span><span class="comment">//严格的检查空值 如:获取dom元素时,元素可能不存在</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h4 id="6-webpack"><a href="#6-webpack" class="headerlink" title="6. webpack"></a>6. webpack</h4><p>略</p><h4 id="7-面向对象"><a href="#7-面向对象" class="headerlink" title="7. 面向对象"></a>7. 面向对象</h4><p>所有操作都通过对象  对象:对现实事物的抽象,抽象对应一个具体<br>类<br>定义了一个对象到底长什么样子</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span>&#123;</span><br><span class="line">  <span class="comment">/* 直接定义的属性是实例属性,需要通过对象的实例去访问</span></span><br><span class="line"><span class="comment">  const per =new Person();</span></span><br><span class="line"><span class="comment">  per.name</span></span><br><span class="line"><span class="comment">  在属性前使用static关键字可以定义类属性(静态属性),可以直接通过类去访问</span></span><br><span class="line"><span class="comment">  Person.age</span></span><br><span class="line"><span class="comment">  readonly开头的属性表示一个只读的属性无法修改</span></span><br><span class="line"><span class="comment">  static readonly 静态只读属性(前后不能改) </span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">  <span class="attr">name</span>:string<span class="comment">//=&#x27;孙悟空&#x27;;</span></span><br><span class="line">  <span class="comment">// 如果方法以stataic开头则方法就是类方法,可以直接通过类去调用</span></span><br><span class="line">  <span class="keyword">static</span> <span class="attr">age</span>:number<span class="comment">//=18;</span></span><br><span class="line">  <span class="title function_">sayHello</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Hello 大家好!&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//constructor被称为构造函数</span></span><br><span class="line">  <span class="comment">//构造函数会在对象创建时调用</span></span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">name:string,age:number</span>)&#123;</span><br><span class="line">    <span class="comment">//实例方法中,this表示当前实例</span></span><br><span class="line">    <span class="comment">//在构造函数中当前对象就是当前新建的那个对象</span></span><br><span class="line">    <span class="comment">// 可以通过this向新建对象中添加属性</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>);</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span>=name;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">age</span>=age</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> per=<span class="keyword">new</span> <span class="title class_">Person</span>();</span><br></pre></td></tr></table></figure><p>继承<br>ocp原则 open close principle;开闭原则<br>对扩展开放 对修改关闭</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//定义一个Animal类</span></span><br><span class="line">calss <span class="title class_">Animal</span>&#123;</span><br><span class="line">  <span class="attr">name</span>:string;</span><br><span class="line">  <span class="attr">age</span>:number;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">name:string,age:number</span>)&#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span>=name;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">age</span>=age;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">sayHello</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;XXX&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//定义一个狗的类</span></span><br><span class="line">calss <span class="title class_">Dog</span> <span class="keyword">extends</span> <span class="title class_">Animal</span>&#123;</span><br><span class="line">  <span class="comment">// name:string;</span></span><br><span class="line">  <span class="comment">// age:number;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// constructor(name:string,age:number)&#123;</span></span><br><span class="line">  <span class="comment">//   this.name=name;</span></span><br><span class="line">  <span class="comment">//   this.age=age;</span></span><br><span class="line">  <span class="comment">// &#125;</span></span><br><span class="line">  <span class="comment">// sayHello()&#123;</span></span><br><span class="line">  <span class="comment">//   console.log(&#x27;汪汪&#x27;);</span></span><br><span class="line">  <span class="comment">// &#125;</span></span><br><span class="line">  <span class="title function_">run</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;$&#123;this.name&#125;在跑~~~&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 定义一个猫的类</span></span><br><span class="line"><span class="comment">// 使cat类继承Animal类</span></span><br><span class="line"><span class="comment">// 此时Animal被称为父类(超类),Cat称为子类</span></span><br><span class="line"><span class="comment">// 使用继承后子类会拥有父类所有属性和方法</span></span><br><span class="line"><span class="comment">// 通过继承可以将多个类中共有的代码写在一个父类中</span></span><br><span class="line"><span class="comment">// -这样只需要写一次即可让所有的子类都同事拥有父类中的属性</span></span><br><span class="line"><span class="comment">// -如果希望在子类中添加一些父类中没有的属性或方法直接加就可以</span></span><br><span class="line"><span class="comment">// 如果在子类中添加了和父类相同的方法,则子类方法会覆盖掉父类方法</span></span><br><span class="line"><span class="comment">// -这种子类覆盖掉父类方法的形式,我们称为方法重写</span></span><br><span class="line">calss <span class="title class_">Cat</span> <span class="keyword">extends</span> <span class="title class_">Animal</span>&#123;</span><br><span class="line">  <span class="attr">gender</span>:string;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">name:string,age:string,gender:string</span>)&#123;</span><br><span class="line">    <span class="comment">//如果子类写了构造函数,在子类构造函数中必须对父类构造函数进行调用</span></span><br><span class="line">    <span class="variable language_">super</span>(name,age);</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">gender</span>=gender;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">sayHello</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="comment">//在类的方法中super就表示当前类的父类</span></span><br><span class="line">    <span class="variable language_">super</span>.<span class="title function_">sayHello</span>();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> dog=<span class="keyword">new</span> <span class="title class_">Dog</span>(<span class="string">&#x27;旺财&#x27;</span>,<span class="number">5</span>);</span><br><span class="line"><span class="keyword">const</span> cat=<span class="keyword">new</span> <span class="title class_">Cat</span>(<span class="string">&#x27;咪咪&#x27;</span>,<span class="number">3</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(dog);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(cat);</span><br><span class="line">dog.<span class="title function_">sayHello</span>();</span><br></pre></td></tr></table></figure><p>抽象类</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 因为Animal范围太大,不够具体,我们只希望Animal类被其它类去继承,不希望他被实例化,所以使用abstract关键字</span></span><br><span class="line"><span class="comment">// 抽象类和其他类区别不大,只是不能用来创建对象</span></span><br><span class="line"><span class="comment">// 专门用来被继承的类,生下来就是给别人当父类的</span></span><br><span class="line"><span class="comment">// 抽象类中可以添加抽象方法</span></span><br><span class="line">abstract calss <span class="title class_">Animal</span>&#123;</span><br><span class="line">  <span class="attr">name</span>:string;</span><br><span class="line">  <span class="attr">age</span>:number;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">name:string,age:number</span>)&#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span>=name;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">age</span>=age;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 这个方法没有具体意义,又有可能存在忘记重写的情况,所以期望我们把这个方法结构定义出来,不产生实际价值,由子类决定具体</span></span><br><span class="line">  <span class="comment">// 抽象方法使用abstract开头,没有方法体</span></span><br><span class="line">  <span class="comment">// 抽象方法只能定义在抽象类中,子类必须对抽象方法进行重写</span></span><br><span class="line">  abstract <span class="title function_">sayHello</span>():<span class="keyword">void</span>;</span><br><span class="line">&#125;</span><br><span class="line">calss <span class="title class_">Dog</span> <span class="keyword">extends</span> <span class="title class_">Animal</span>&#123;</span><br><span class="line">  <span class="title function_">run</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;$&#123;this.name&#125;在跑~~~&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">sayHello</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;汪汪&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接口</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 描述一个对象的类型</span></span><br><span class="line">type myType=&#123;</span><br><span class="line">  <span class="attr">name</span>:string,</span><br><span class="line">  <span class="attr">age</span>:number</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 接口用来定义一个类结构,用来定义一个类中应该包含哪些属性和方法</span></span><br><span class="line"><span class="comment">// 同时接口也可以当成类型声明去使用</span></span><br><span class="line">interface myInterface&#123;</span><br><span class="line">  <span class="attr">name</span>:string;</span><br><span class="line">  <span class="attr">age</span>:number</span><br><span class="line">&#125;</span><br><span class="line">interface myInterface&#123;</span><br><span class="line">  <span class="attr">gender</span>:string</span><br><span class="line">  <span class="comment">// 接口中所有属性都不能有实际的值</span></span><br><span class="line">  <span class="title function_">sayHello</span>():<span class="keyword">void</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// const obj:myType=&#123;</span></span><br><span class="line"><span class="comment">//   name:&#x27;孙悟空&#x27;,</span></span><br><span class="line"><span class="comment">//   age:500,</span></span><br><span class="line"><span class="comment">//   gender:&#x27;男&#x27;</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 接口可以在定义类的时候限制类的结构</span></span><br><span class="line"><span class="comment">// 接口只定义对象的结构,而不考虑实际值</span></span><br><span class="line"><span class="comment">// 在接口中所有方法都是抽象方法</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义类的时候,可以使类去实现一个接口,</span></span><br><span class="line"><span class="comment">// 实现接口是使类满足接口的要求</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyClass</span> implements myInterface&#123;</span><br><span class="line">  <span class="attr">name</span>:string;</span><br><span class="line">  <span class="attr">age</span>:number;</span><br><span class="line">  <span class="attr">gender</span>:string;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">name:string,age:number,gender:string</span>)&#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span>=name;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">age</span>=age;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">gender</span>=gender;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">sayHello</span>():<span class="keyword">void</span>&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;hi&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>属性的封装</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span>&#123;</span><br><span class="line">  <span class="comment">// ts可以在属性前添加属性修饰符</span></span><br><span class="line">  <span class="comment">// public修饰的属性可以在任意位置访问(修改)  默认值</span></span><br><span class="line">  <span class="comment">// private私有属性,私有属性只能在类内部进行访问(修改)</span></span><br><span class="line">  <span class="comment">//   通过在类中添加方法使得私有属性可以被外部访问</span></span><br><span class="line">  <span class="comment">// protected受保护的属性,只能在当前类和当前类的子类中访问(修改)</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">_name</span>:string</span><br><span class="line">  <span class="attr">_age</span>:number</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">name:string,age:number</span>)&#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">_name</span>=name;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">_age</span>=age</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 定义方法用来获取name属性</span></span><br><span class="line">  <span class="comment">// 属性掌控在自己手里</span></span><br><span class="line">  <span class="comment">// getter方法用来读取属性</span></span><br><span class="line">  <span class="comment">// setter方法用来设置属性</span></span><br><span class="line">  <span class="comment">// 他们称为属性的存取器 </span></span><br><span class="line">  <span class="comment">// getName()&#123;</span></span><br><span class="line">  <span class="comment">//   return this._name</span></span><br><span class="line">  <span class="comment">// &#125;</span></span><br><span class="line">  <span class="comment">// setName(value:string)&#123;</span></span><br><span class="line">  <span class="comment">//   this._name=value;</span></span><br><span class="line">  <span class="comment">// &#125;</span></span><br><span class="line">  <span class="comment">// getAge()&#123;</span></span><br><span class="line">  <span class="comment">//   return this._age;</span></span><br><span class="line">  <span class="comment">// &#125;</span></span><br><span class="line">  <span class="comment">// setAge(value:number)&#123;</span></span><br><span class="line">  <span class="comment">//   if(value&gt;=0)&#123;</span></span><br><span class="line">  <span class="comment">//     this._age=value;</span></span><br><span class="line">  <span class="comment">//   &#125;</span></span><br><span class="line">  <span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// ts中设置getter方法的方式</span></span><br><span class="line">  <span class="keyword">get</span> <span class="title function_">name</span>()&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">_name</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">set</span> <span class="title function_">name</span>(<span class="params">value:string</span>)&#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">_name</span>=value;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">get</span> <span class="title function_">age</span>()&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">_age</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">set</span> <span class="title function_">age</span>(<span class="params">value:number</span>)&#123;</span><br><span class="line">    <span class="keyword">if</span>(value&gt;=<span class="number">0</span>)&#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">_age</span>=value;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> per=<span class="keyword">new</span> <span class="title class_">Person</span>(<span class="attr">name</span>:<span class="string">&#x27;孙悟空&#x27;</span>,<span class="attr">age</span>:<span class="number">18</span>);</span><br><span class="line"><span class="comment">// 现在属性是在对象中设置的,属性可以任意的被修改</span></span><br><span class="line"><span class="comment">// 属性可以任意被修改将会导致对象中的数据变得非常不安全</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(per.<span class="property">name</span>)<span class="comment">//调用name方法</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 可以直接将属性定义在构造函数中</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">C</span>&#123;</span><br><span class="line">  <span class="attr">name</span>:string;</span><br><span class="line">  <span class="attr">age</span>:number;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">name:string,age:number</span>)&#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span>=name;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">age</span>=age;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 等价于</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">C</span>&#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">public name:string,public age:number</span>)&#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>泛型</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">在定义函数或是类时,如果遇到类型不明确时就可以使用泛型</span><br><span class="line"><span class="keyword">function</span> fn&lt;T&gt;(<span class="attr">a</span>:T):T&#123;</span><br><span class="line">  <span class="keyword">return</span> a;</span><br><span class="line">&#125;</span><br><span class="line">可以直接调用具有泛型的函数</span><br><span class="line"><span class="keyword">let</span> result=<span class="title function_">fn</span>(<span class="number">10</span>);<span class="comment">//不指定泛型,ts自动对类型进行推断</span></span><br><span class="line"><span class="keyword">let</span> result2=fn&lt;string&gt;(<span class="string">&#x27;hello&#x27;</span>)<span class="comment">//指定泛型</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> fn2&lt;T,K&gt;(<span class="attr">a</span>:T,<span class="attr">b</span>:K):T&#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(b);</span><br><span class="line">  <span class="keyword">return</span> a;</span><br><span class="line">&#125;</span><br><span class="line">fn&lt;number,string&gt;(<span class="number">123</span>,<span class="string">&#x27;hello&#x27;</span>)</span><br><span class="line">interface <span class="title class_">Inter</span>&#123;</span><br><span class="line">  <span class="attr">length</span>:number;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//T extends Inter表示泛型T必须是Inter实现类(子类)</span></span><br><span class="line"><span class="keyword">function</span> fn3&lt;T <span class="keyword">extends</span> <span class="title class_">Inter</span>&gt;(<span class="attr">a</span>:T):number&#123;</span><br><span class="line">  <span class="keyword">return</span> a.<span class="property">length</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">fn3</span>(&#123;<span class="attr">length</span>:<span class="number">10</span>&#125;);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> ts </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SASS</title>
      <link href="/2022/07/05/sass/"/>
      <url>/2022/07/05/sass/</url>
      
        <content type="html"><![CDATA[<h3 id="sass"><a href="#sass" class="headerlink" title="sass"></a>sass</h3><h5 id="1-1命名变量"><a href="#1-1命名变量" class="headerlink" title="1.1命名变量"></a>1.1命名变量</h5><p>用<code>&#39;$&#39;</code> <code>$highlight:#F90</code></p><h5 id="1-2变量引用"><a href="#1-2变量引用" class="headerlink" title="1.2变量引用"></a>1.2变量引用</h5><p>{}会形成作用域,里面可以引用外面,外面不能引用里面</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">$<span class="selector-tag">nav</span>-<span class="attribute">color</span>: <span class="number">#F90</span>;</span><br><span class="line"><span class="selector-tag">nav</span> &#123;</span><br><span class="line">  $<span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">width</span>: $width;</span><br><span class="line">  <span class="attribute">color</span>: $nav-color;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//编译后</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">nav</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#F90</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="1-3中划线和下划线命名想通"><a href="#1-3中划线和下划线命名想通" class="headerlink" title="1.3中划线和下划线命名想通"></a>1.3中划线和下划线命名想通</h5><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">$link-<span class="attribute">color</span>: blue;</span><br><span class="line"><span class="selector-tag">a</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: $link_color;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//编译后</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">a</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: blue;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-嵌套规则"><a href="#2-嵌套规则" class="headerlink" title="2.嵌套规则"></a>2.嵌套规则</h4><p>在Sass中，你可以像俄罗斯套娃那样在规则块中嵌套规则块。<code>sass</code>在输出<code>css</code>时会帮你把这些嵌套规则处理好，避免你的重复书写</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#content</span> &#123;</span><br><span class="line">  <span class="selector-tag">article</span> &#123;</span><br><span class="line">    <span class="selector-tag">h1</span> &#123; <span class="attribute">color</span>: <span class="number">#333</span> &#125;</span><br><span class="line">    <span class="selector-tag">p</span> &#123; <span class="attribute">margin-bottom</span>: <span class="number">1.4em</span> &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="selector-tag">aside</span> &#123; <span class="attribute">background-color</span>: <span class="number">#EEE</span> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">/* 编译后 */</span></span><br><span class="line"><span class="selector-id">#content</span> <span class="selector-tag">article</span> <span class="selector-tag">h1</span> &#123; <span class="attribute">color</span>: <span class="number">#333</span> &#125;</span><br><span class="line"><span class="selector-id">#content</span> <span class="selector-tag">article</span> <span class="selector-tag">p</span> &#123; <span class="attribute">margin-bottom</span>: <span class="number">1.4em</span> &#125;</span><br><span class="line"><span class="selector-id">#content</span> <span class="selector-tag">aside</span> &#123; <span class="attribute">background-color</span>: <span class="number">#EEE</span> &#125;</span><br></pre></td></tr></table></figure><h5 id="2-1父选择器标识符-amp"><a href="#2-1父选择器标识符-amp" class="headerlink" title="2.1父选择器标识符&amp;"></a>2.1父选择器标识符&amp;</h5><p>伪类正常写会使后代全部变色</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">article</span> <span class="selector-tag">a</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: blue;</span><br><span class="line">  <span class="selector-pseudo">:hover</span> &#123; <span class="attribute">color</span>: red &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用&amp;解决问题</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">article</span> <span class="selector-tag">a</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: blue;</span><br><span class="line">  &amp;<span class="selector-pseudo">:hover</span> &#123; <span class="attribute">color</span>: red &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="2-2群组选择器嵌套"><a href="#2-2群组选择器嵌套" class="headerlink" title="2.2群组选择器嵌套"></a>2.2群组选择器嵌套</h5><p>.button会选择到所有button标签</p><p>之前</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.container</span> <span class="selector-tag">h1</span>, <span class="selector-class">.container</span> <span class="selector-tag">h2</span>, <span class="selector-class">.container</span> <span class="selector-tag">h3</span> &#123; <span class="attribute">margin-bottom</span>: .<span class="number">8em</span> &#125;</span><br></pre></td></tr></table></figure><p>现在</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">  <span class="selector-tag">h1</span>, <span class="selector-tag">h2</span>, <span class="selector-tag">h3</span> &#123;<span class="attribute">margin-bottom</span>: .<span class="number">8em</span>&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="2-3子组合选择器和同层组合选择器：-gt-、-和"><a href="#2-3子组合选择器和同层组合选择器：-gt-、-和" class="headerlink" title="2.3子组合选择器和同层组合选择器：&gt;、+和~"></a>2.3子组合选择器和同层组合选择器：&gt;、+和~</h5><p>空格会选择会选择article下的所有命中section选择器的元素</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">article</span> <span class="selector-tag">section</span> &#123; <span class="attribute">margin</span>: <span class="number">5px</span> &#125;</span><br></pre></td></tr></table></figure><p>选择器&gt;择article下紧跟着的子元素中命中section选择器的元素</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">article</span> &gt; <span class="selector-tag">section</span> &#123; <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#ccc</span> &#125;</span><br></pre></td></tr></table></figure><p>同层相邻组合选择器<code>+</code>选择<code>header</code>元素后紧跟的<code>p</code>元素</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">header</span> + <span class="selector-tag">p</span> &#123; <span class="attribute">font-size</span>: <span class="number">1.1em</span> &#125;</span><br></pre></td></tr></table></figure><p>同层全体组合选择器<code>~</code>，选择所有跟在<code>article</code>后的同层<code>article</code>元素</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">article</span> ~ <span class="selector-tag">article</span> &#123; <span class="attribute">border-top</span>: <span class="number">1px</span> dashed <span class="number">#ccc</span> &#125;</span><br></pre></td></tr></table></figure><h5 id="2-4嵌套属性"><a href="#2-4嵌套属性" class="headerlink" title="2.4嵌套属性"></a>2.4嵌套属性</h5><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">nav</span> &#123;</span><br><span class="line">  <span class="attribute">border</span>: &#123;</span><br><span class="line">  style: solid;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">1px</span>;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#ccc</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编译后</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">nav</span> &#123;</span><br><span class="line">  <span class="attribute">border-style</span>: solid;</span><br><span class="line">  <span class="attribute">border-width</span>: <span class="number">1px</span>;</span><br><span class="line">  <span class="attribute">border-color</span>: <span class="number">#ccc</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-导入sass文件"><a href="#3-导入sass文件" class="headerlink" title="3.导入sass文件"></a>3.导入sass文件</h4><p>@import</p><h5 id="3-1使用sassMOUDLE"><a href="#3-1使用sassMOUDLE" class="headerlink" title="3.1使用sassMOUDLE"></a>3.1使用sassMOUDLE</h5><p><code>sass</code>局部文件(MODULE)的文件名以下划线开头。这样，<code>sass</code>就不会在编译时单独编译这个文件输出<code>css</code>，而只把这个文件用作导入。当你<code>@import</code>一个局部文件时，还可以不写文件的全名，即省略文件名开头的下划线。举例来说，你想导入<code>themes/_night-sky.scss</code>这个局部文件里的变量，你只需在样式表中写<code>@import</code> <code>&quot;themes/night-sky&quot;</code>。</p><h5 id="3-2默认变量值"><a href="#3-2默认变量值" class="headerlink" title="3.2默认变量值"></a>3.2默认变量值</h5><p>多次声明以最后一个为准</p><p><code>!default</code>标签:含义是：如果这个变量被声明赋值了，那就用它声明的值，否则就用这个默认值。</p><h5 id="3-3嵌套导入"><a href="#3-3嵌套导入" class="headerlink" title="3.3嵌套导入"></a>3.3嵌套导入</h5><p>有一个名为<code>_blue-theme.scss</code>的局部文件</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">aside</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: blue;</span><br><span class="line">  <span class="attribute">color</span>: white;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后把它导入到一个CSS规则内</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.blue-theme</span> &#123;<span class="keyword">@import</span> <span class="string">&quot;blue-theme&quot;</span>&#125;</span><br><span class="line"></span><br><span class="line">//生成的结果跟你直接在.blue-theme选择器内写_blue-theme.scss文件的内容完全一样。</span><br><span class="line"></span><br><span class="line">.blue-theme &#123;</span><br><span class="line">  <span class="selector-tag">aside</span> &#123;</span><br><span class="line">    <span class="attribute">background</span>: blue;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#fff</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="3-4原生CSS导入"><a href="#3-4原生CSS导入" class="headerlink" title="3.4原生CSS导入"></a>3.4原生CSS导入</h5><p>在<code>sass</code>中使用<code>@import</code>时，<code>sass</code>会尝试找到对应的<code>sass</code>文件并导入进来，但在下列三种情况下会生成原生的<code>CSS@import</code>，尽管这会造成浏览器解析<code>css</code>时的额外下载：</p><ul><li>被导入文件的名字以<code>.css</code>结尾；</li><li>被导入文件的名字是一个URL地址（比如<a href="http://www.sass.hk/css/css.css%EF%BC%89%EF%BC%8C%E7%94%B1%E6%AD%A4%E5%8F%AF%E7%94%A8%E8%B0%B7%E6%AD%8C%E5%AD%97%E4%BD%93API%E6%8F%90%E4%BE%9B%E7%9A%84%E7%9B%B8%E5%BA%94%E6%9C%8D%E5%8A%A1%EF%BC%9B">http://www.sass.hk/css/css.css），由此可用谷歌字体API提供的相应服务；</a></li><li>被导入文件的名字是<code>CSS</code>的url()值。</li></ul><p>这就是说，你不能用<code>sass</code>的<code>@import</code>直接导入一个原始的<code>css</code>文件，因为<code>sass</code>会认为你想用<code>css</code>原生的<code>@import</code>。但是，因为<code>sass</code>的语法完全兼容<code>css</code>，所以你可以把原始的<code>css</code>文件改名为<code>.scss</code>后缀，即可直接导入了。</p><h4 id="4-静默注释"><a href="#4-静默注释" class="headerlink" title="4.静默注释"></a>4.静默注释</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#333</span>; // 这种注释内容不会出现在生成的css文件中</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">0</span>; <span class="comment">/* 这种注释内容会出现在生成的css文件中 */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实际上格式<code>/* ... */</code>内的注释内容亦可在生成的<code>css</code>文件中抹去</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">  <span class="attribute">color</span> <span class="comment">/* 这块注释内容不会出现在生成的css中 */</span>: <span class="number">#333</span>;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">1</span>; <span class="comment">/* 这块注释内容也不会出现在生成的css中 */</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="5-混合器"><a href="#5-混合器" class="headerlink" title="5.混合器"></a>5.混合器</h4><p>混合器使用<code>@mixin</code>标识符定义</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@mixin</span> rounded-corners &#123;</span><br><span class="line">  -moz-<span class="attribute">border-radius</span>: <span class="number">5px</span>;</span><br><span class="line">  -webkit-<span class="attribute">border-radius</span>: <span class="number">5px</span>;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">5px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过<code>@include</code>来使用这个混合器</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">notice &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: green;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">2px</span> solid <span class="number">#00aa00</span>;</span><br><span class="line">  <span class="keyword">@include</span> rounded-corners;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>sass最终生成：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.notice</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: green;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">2px</span> solid <span class="number">#00aa00</span>;</span><br><span class="line">  -moz-<span class="attribute">border-radius</span>: <span class="number">5px</span>;</span><br><span class="line">  -webkit-<span class="attribute">border-radius</span>: <span class="number">5px</span>;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">5px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="5-1何时使用混合器"><a href="#5-1何时使用混合器" class="headerlink" title="5.1何时使用混合器"></a>5.1何时使用混合器</h5><p>如果你发现自己在不停地重复一段样式，那就应该把这段样式构造成优良的混合器</p><h5 id="5-2混合器中的CSS规则"><a href="#5-2混合器中的CSS规则" class="headerlink" title="5.2混合器中的CSS规则"></a>5.2混合器中的CSS规则</h5><p>混合器中不仅可以包含属性，也可以包含<code>css</code>规则</p><h5 id="5-3给混合器传参"><a href="#5-3给混合器传参" class="headerlink" title="5.3给混合器传参"></a>5.3给混合器传参</h5><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@mixin</span> link-colors($normal, $<span class="attribute">hover</span>, $visited) &#123;</span><br><span class="line">  <span class="attribute">color</span>: $normal;</span><br><span class="line">  &amp;<span class="selector-pseudo">:hover</span> &#123; <span class="attribute">color</span>: $hover; &#125;</span><br><span class="line">  &amp;<span class="selector-pseudo">:visited</span> &#123; <span class="attribute">color</span>: $visited; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">a</span> &#123;</span><br><span class="line">  <span class="keyword">@include</span> link-colors(blue, red, green);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//Sass最终生成的是：</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">a</span> &#123; <span class="attribute">color</span>: blue; &#125;</span><br><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:hover</span> &#123; <span class="attribute">color</span>: red; &#125;</span><br><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:visited</span> &#123; <span class="attribute">color</span>: green; &#125;</span><br></pre></td></tr></table></figure><h5 id="5-4默认参数值"><a href="#5-4默认参数值" class="headerlink" title="5.4默认参数值"></a>5.4默认参数值</h5><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@mixin</span> link-colors(</span><br><span class="line">    $normal,</span><br><span class="line">    $<span class="attribute">hover</span>: $normal,</span><br><span class="line">    $<span class="attribute">visited</span>: $normal</span><br><span class="line">  )</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attribute">color</span>: $normal;</span><br><span class="line">  &amp;<span class="selector-pseudo">:hover</span> &#123; <span class="attribute">color</span>: $hover; &#125;</span><br><span class="line">  &amp;<span class="selector-pseudo">:visited</span> &#123; <span class="attribute">color</span>: $visited; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果像下边这样调用：<code>@include link-colors(red)</code> <code>$hover</code>和<code>$visited</code>也会被自动赋值为<code>red</code></p><h4 id="6-使用选择器继承来精简CSS"><a href="#6-使用选择器继承来精简CSS" class="headerlink" title="6.使用选择器继承来精简CSS"></a>6.使用选择器继承来精简CSS</h4><p>@extend</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">//通过选择器继承继承样式</span><br><span class="line"><span class="selector-class">.error</span> &#123;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid red;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#fdd</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.seriousError</span> &#123;</span><br><span class="line">  <span class="keyword">@extend</span> .error;</span><br><span class="line">  <span class="attribute">border-width</span>: <span class="number">3px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>.seriousError</code>不仅会继承<code>.error</code>自身的所有样式，任何跟<code>.error</code>有关的组合选择器样式也会被<code>.seriousError</code>以组合选择器的形式继承</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">//<span class="selector-class">.seriousError</span>从<span class="selector-class">.error</span>继承样式</span><br><span class="line"><span class="selector-class">.error</span> <span class="selector-tag">a</span>&#123;  //应用到<span class="selector-class">.seriousError</span> <span class="selector-tag">a</span></span><br><span class="line">  <span class="attribute">color</span>: red;</span><br><span class="line">  <span class="attribute">font-weight</span>: <span class="number">100</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">h1</span><span class="selector-class">.error</span> &#123; //应用到hl<span class="selector-class">.seriousError</span></span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">1.2rem</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="6-1何时使用继承"><a href="#6-1何时使用继承" class="headerlink" title="6.1何时使用继承"></a>6.1何时使用继承</h5><p>当一个元素拥有的类（比如说<code>.seriousError</code>）表明它属于另一个类（比如说<code>.error</code>），这时使用继承再合适不过了</p><h5 id="6-2继承的高级用法"><a href="#6-2继承的高级用法" class="headerlink" title="6.2继承的高级用法"></a>6.2继承的高级用法</h5><p>任何<code>css</code>规则都可以继承其他规则，几乎任何<code>css</code>规则也都可以被继承</p><h5 id="6-3继承的工作细节"><a href="#6-3继承的工作细节" class="headerlink" title="6.3继承的工作细节"></a>6.3继承的工作细节</h5><p>关于<code>@extend</code>有两个要点你应该知道</p><ul><li>跟混合器相比，继承生成的<code>css</code>代码相对更少。因为继承仅仅是重复选择器，而不会重复属性，所以使用继承往往比混合器生成的<code>css</code>体积更小。如果你非常关心你站点的速度，请牢记这一点。</li><li>继承遵从<code>css</code>层叠的规则。当两个不同的<code>css</code>规则应用到同一个<code>html</code>元素上时，并且这两个不同的<code>css</code>规则对同一属性的修饰存在不同的值，<code>css</code>层叠规则会决定应用哪个样式。相当直观：通常权重更高的选择器胜出，如果权重相同，定义在后边的规则胜出。</li></ul><h5 id="6-4使用继承的最佳实践"><a href="#6-4使用继承的最佳实践" class="headerlink" title="6.4使用继承的最佳实践"></a>6.4使用继承的最佳实践</h5><p>避免重复最好方法就是不要在<code>css</code>规则中使用后代选择器去继承<code>css</code>规则</p>]]></content>
      
      
      
        <tags>
            
            <tag> css </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>reduce</title>
      <link href="/2022/06/30/reduce/"/>
      <url>/2022/06/30/reduce/</url>
      
        <content type="html"><![CDATA[<p>```js<br>const arr=[<br>  {id:1,name:’西瓜’,state:true,price:10,count:1},<br>  {id:2,name:’榴莲’,state:false,price:80,count:2},<br>  {id:3,name:’草莓’,state:true,price:30,count:5},<br>  {id:3,name:’香蕉’,state:true,price:15,count:6},<br>]</p><p>// let amt=0<br>// arr.filter(item=&gt;item.state).forEach(item=&gt;{<br>//   amt+=item.count*item.price<br>// })</p><p>// console.log(amt)<br>// reduce((累加的结果,当前循环项)=&gt;,初始值)<br>const result=arr.filter(item=&gt;item.state).reduce((amt,item)=&gt;{<br>  return amt+=item.count*item.price<br>},0)<br>console.log(result)</p>]]></content>
      
      
      
        <tags>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>promise前世今生</title>
      <link href="/2022/06/27/promise%E5%89%8D%E4%B8%96%E4%BB%8A%E7%94%9F/"/>
      <url>/2022/06/27/promise%E5%89%8D%E4%B8%96%E4%BB%8A%E7%94%9F/</url>
      
        <content type="html"><![CDATA[<h3 id="Promise"><a href="#Promise" class="headerlink" title="Promise"></a>Promise</h3><h4 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h4><p>promise在es6出来之前就有了,es6将promise进行了原生化<br>promise的库:blueBird(高性能)<br>promise规范:promiseA+规范</p><h4 id="1-jQuery发送请求的方式"><a href="#1-jQuery发送请求的方式" class="headerlink" title="1. jQuery发送请求的方式"></a>1. jQuery发送请求的方式</h4><h5 id="1-通过jQuery发送ajax请求"><a href="#1-通过jQuery发送ajax请求" class="headerlink" title="1. 通过jQuery发送ajax请求"></a>1. 通过jQuery发送ajax请求</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$.<span class="title function_">ajax</span>(&#123;</span><br><span class="line">  <span class="attr">url</span>:<span class="string">&#x27;url&#x27;</span>,</span><br><span class="line">  <span class="attr">type</span>:<span class="string">&#x27;GET&#x27;</span>,</span><br><span class="line">  <span class="attr">dataType</span>:<span class="string">&#x27;JSON&#x27;</span>,</span><br><span class="line">  <span class="attr">success</span>:<span class="keyword">function</span>(<span class="params">data</span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(data);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h5 id="2-jQuery进行了优化之后的请求"><a href="#2-jQuery进行了优化之后的请求" class="headerlink" title="2. jQuery进行了优化之后的请求"></a>2. jQuery进行了优化之后的请求</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> ajax1=$.<span class="title function_">ajax</span>(<span class="string">&#x27;url&#x27;</span>)</span><br><span class="line">ajax1.<span class="title function_">done</span>(<span class="keyword">function</span>(<span class="params">data</span>)&#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(data);</span><br><span class="line">&#125;).<span class="title function_">fail</span>(<span class="keyword">function</span>(<span class="params">err</span>)&#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(err);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h5 id="3-jQuery进行了promise优化后的请求"><a href="#3-jQuery进行了promise优化后的请求" class="headerlink" title="3. jQuery进行了promise优化后的请求"></a>3. jQuery进行了promise优化后的请求</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> ajax2=$.<span class="title function_">ajax</span>(<span class="string">&#x27;url&#x27;</span>)</span><br><span class="line">ajax2.<span class="title function_">then</span>(<span class="keyword">function</span>(<span class="params">data</span>)&#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(data);</span><br><span class="line">&#125;,<span class="keyword">function</span>(<span class="params">err</span>)&#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(err)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h4 id="2-promise主要解决的问题"><a href="#2-promise主要解决的问题" class="headerlink" title="2. promise主要解决的问题"></a>2. promise主要解决的问题</h4><p><strong>回调地狱</strong><br>建一个文件name.txt,内容./number.txt<br>再建一个number.txt,内容./score.txt<br>再建一个score.txt,内容100<br>./name.txt-&gt;./number.txt-&gt;./score.txt-&gt;100<br>我们要通过层层嵌套通过name访问到最后的100</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> fs=<span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>);</span><br><span class="line"><span class="comment">//first error 所有回调函数的规则，第一个参数是error</span></span><br><span class="line"><span class="comment">//回调地狱:捕获错误的时候很麻烦</span></span><br><span class="line">fs.<span class="title function_">readFile</span>(<span class="string">&#x27;./name.txt&#x27;</span>,<span class="string">&#x27;utf-8&#x27;</span>,<span class="title function_">fucntion</span>(<span class="params">err,data</span>)&#123;</span><br><span class="line">  fs.<span class="title function_">readFile</span>(data,<span class="string">&#x27;utf-8&#x27;</span>,<span class="keyword">function</span>(<span class="params">err,data</span>)&#123;</span><br><span class="line">    fs.<span class="title function_">readFile</span>(data,<span class="string">&#x27;utf-8&#x27;</span>,<span class="keyword">function</span>(<span class="params">err,data</span>)&#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(data);</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>回调地狱存在的问题:可读性差、捕获错误异常麻烦</p><h4 id="3-了解promise之前一定要了解的概念"><a href="#3-了解promise之前一定要了解的概念" class="headerlink" title="3.了解promise之前一定要了解的概念"></a>3.了解promise之前一定要了解的概念</h4><h5 id="1-异步"><a href="#1-异步" class="headerlink" title="1.异步"></a>1.异步</h5><p>  DOM冲突;(单线程);<br>  定时器;事件;<br>  因为js是单线程,插入任务的解决方案是异步,异步任务的解决方案是事件轮询;</p><h5 id="2-事件轮询"><a href="#2-事件轮询" class="headerlink" title="2.事件轮询"></a>2.事件轮询</h5><p>  event loop<br>  主线任务为空之后<br>  事件队列当中是否有任务<br>  核心:回调函数</p><h5 id="3-回调函数"><a href="#3-回调函数" class="headerlink" title="3.回调函数"></a>3.回调函数</h5><p>  是指通过参数将函数传递到其它代码的，某一块可执行代码的引用</p><h4 id="4-promise引子"><a href="#4-promise引子" class="headerlink" title="4. promise引子"></a>4. promise引子</h4><p>写一个基本的函数readFile返回promise</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> fs=<span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>);</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">readFile</span>(<span class="params">pathname</span>)&#123;</span><br><span class="line">  <span class="comment">// execution 执行器函数</span></span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="keyword">function</span>(<span class="params">resolve,reject</span>)&#123;</span><br><span class="line">    fs.<span class="title function_">readFile</span>(pathname,<span class="string">&#x27;utf-8&#x27;</span>,<span class="title function_">fucntion</span>(<span class="params">err,data</span>)&#123;</span><br><span class="line">      <span class="keyword">if</span>(err)&#123;</span><br><span class="line">        <span class="title function_">reject</span>(err);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="title function_">resolve</span>(data);</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 异步任务的完成与否取决于当前promise状态也就是promise的生命周期;</span></span><br><span class="line"><span class="keyword">let</span> promise=<span class="title function_">readFile</span>(<span class="string">&#x27;./name.txt&#x27;</span>);</span><br><span class="line"><span class="comment">// 3个状态2个阶段</span></span><br><span class="line"><span class="comment">// pending 进行中</span></span><br><span class="line"><span class="comment">// fulfilled 已完成</span></span><br><span class="line"><span class="comment">// rejected 已失败</span></span><br><span class="line">promise.<span class="title function_">then</span>(<span class="keyword">function</span>(<span class="params">data</span>)&#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;success&#x27;</span>+data);</span><br><span class="line">&#125;,<span class="keyword">function</span>(<span class="params">err</span>)&#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(err);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//1.promise的状态不受外界影响</span></span><br><span class="line"><span class="comment">//2.promise的固化性:状态一旦改变就无法更改</span></span><br></pre></td></tr></table></figure><p>通过我们写的readFile方法去读取到最终的100</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> fs=<span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> &#123; resolve &#125; = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">readFile</span>(<span class="params">pathname</span>)&#123;</span><br><span class="line">  <span class="comment">// execution 执行器函数</span></span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="keyword">function</span>(<span class="params">resolve,reject</span>)&#123;</span><br><span class="line">    fs.<span class="title function_">readFile</span>(pathname,<span class="string">&#x27;utf-8&#x27;</span>,<span class="title function_">fucntion</span>(<span class="params">err,data</span>)&#123;</span><br><span class="line">      <span class="keyword">if</span>(err)&#123;</span><br><span class="line">        <span class="title function_">reject</span>(err);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="title function_">resolve</span>(data);</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> promise=<span class="title function_">readFile</span>(<span class="string">&#x27;./name.txt&#x27;</span>);</span><br><span class="line"></span><br><span class="line">promise.<span class="title function_">then</span>(<span class="keyword">function</span>(<span class="params">data</span>)&#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;第一次调用&#x27;</span>+data);</span><br><span class="line">  promise.<span class="title function_">then</span>(<span class="keyword">function</span>(<span class="params">data</span>)&#123;</span><br><span class="line">    conosole.<span class="title function_">log</span>(<span class="string">&#x27;第二次调用&#x27;</span>+data);</span><br><span class="line">    promise.<span class="title function_">then</span>(<span class="keyword">function</span>(<span class="params">data</span>)&#123;</span><br><span class="line">      conosole.<span class="title function_">log</span>(<span class="string">&#x27;第三次调用&#x27;</span>+data);</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>new Promise里的函数会立即执行,后面的.then属于微任务</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//微任务队列,异步队列;</span></span><br><span class="line"><span class="keyword">let</span> promise=<span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="keyword">function</span>(<span class="params">resolve,reject</span>)&#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;promise&#x27;</span>);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;timeout&#x27;</span>)</span><br><span class="line">&#125;,<span class="number">0</span>);</span><br></pre></td></tr></table></figure><h4 id="5-promise特性"><a href="#5-promise特性" class="headerlink" title="5. promise特性"></a>5. promise特性</h4><h5 id="1-promise状态"><a href="#1-promise状态" class="headerlink" title="1. promise状态"></a>1. promise状态</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> p1=<span class="title class_">Promise</span>.<span class="title function_">resolve</span>(<span class="number">1</span>);</span><br><span class="line"><span class="keyword">let</span> p2=<span class="title class_">Promise</span>.<span class="title function_">reject</span>(<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">p1.<span class="title function_">then</span>(<span class="keyword">function</span>(<span class="params">data</span>)&#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(data);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// p2.then(function()&#123;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// &#125;,function(err)&#123;</span></span><br><span class="line"><span class="comment">//   console.log(&#x27;err&#x27;+err)</span></span><br><span class="line"><span class="comment">// &#125;)</span></span><br><span class="line"></span><br><span class="line">p2.<span class="title function_">catch</span>(<span class="keyword">function</span>(<span class="params">err</span>)&#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;err&#x27;</span>+err)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h5 id="2-thenable对象"><a href="#2-thenable对象" class="headerlink" title="2. thenable对象"></a>2. thenable对象</h5><p>当你绑定一个对象的参数为thenable对象的时候,他会默认调用对象里的then方法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> obj=&#123;</span><br><span class="line">  <span class="title function_">then</span>(<span class="params">resolve,reject</span>)&#123;</span><br><span class="line">    <span class="title function_">resolve</span>(<span class="number">11</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> p1=<span class="title class_">Promise</span>.<span class="title function_">resolve</span>(obj);</span><br><span class="line"></span><br><span class="line">p1.<span class="title function_">then</span>(<span class="keyword">function</span>(<span class="params">data</span>)&#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(data);<span class="comment">//11</span></span><br><span class="line">&#125;,<span class="keyword">function</span>(<span class="params">err</span>)&#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;err&#x27;</span>+err)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h5 id="3-链式调用"><a href="#3-链式调用" class="headerlink" title="3. 链式调用"></a>3. 链式调用</h5><h6 id="1-返回值为-普通值-promise"><a href="#1-返回值为-普通值-promise" class="headerlink" title="1.返回值为  普通值||promise"></a>1.返回值为  普通值||promise</h6><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> p1=<span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve,reject</span>)=&gt;</span>&#123;</span><br><span class="line">  <span class="title function_">resolve</span>(<span class="number">1</span>);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">p1.<span class="title function_">then</span>(<span class="function"><span class="params">res</span>=&gt;</span>res)<span class="comment">//1</span></span><br><span class="line">  .<span class="title function_">then</span>(<span class="function"><span class="params">res</span>=&gt;</span>res+<span class="number">1</span>)<span class="comment">//2</span></span><br><span class="line">  .<span class="title function_">then</span>(<span class="function"><span class="params">res</span>=&gt;</span>res+<span class="number">2</span>)<span class="comment">//4</span></span><br></pre></td></tr></table></figure><h6 id="2-其中一个then里有捕获错误-就可以捕获前面的错误"><a href="#2-其中一个then里有捕获错误-就可以捕获前面的错误" class="headerlink" title="2. 其中一个then里有捕获错误,就可以捕获前面的错误"></a>2. 其中一个then里有捕获错误,就可以捕获前面的错误</h6><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> p2=<span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve,reject</span>)=&gt;</span>&#123;</span><br><span class="line">  <span class="title function_">resolve</span>(<span class="number">2</span>);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">p2.<span class="title function_">then</span>(<span class="function"><span class="params">res</span>=&gt;</span><span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve,reject</span>)=&gt;</span>&#123;</span><br><span class="line">  <span class="title function_">resolve</span>(<span class="number">2</span>);</span><br><span class="line">&#125;))</span><br><span class="line">  .<span class="title function_">then</span>(<span class="keyword">function</span>(<span class="params">res</span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(res);</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">reject</span>(<span class="number">10</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">  .<span class="title function_">then</span>(<span class="keyword">function</span>(<span class="params">res</span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(res);</span><br><span class="line">  &#125;)</span><br><span class="line">  .<span class="title function_">catch</span>(<span class="keyword">function</span>(<span class="params">err</span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(err)</span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure><h5 id="4-固化-多层嵌套"><a href="#4-固化-多层嵌套" class="headerlink" title="4. 固化;多层嵌套"></a>4. 固化;多层嵌套</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> p1=<span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve,reject</span>)=&gt;</span>&#123;</span><br><span class="line">  <span class="title function_">resolve</span>(<span class="number">1</span>);</span><br><span class="line">  <span class="title function_">reject</span>(<span class="number">10</span>);</span><br><span class="line">&#125;)</span><br><span class="line">p1.<span class="title function_">then</span>(<span class="function"><span class="params">res</span>=&gt;</span><span class="variable language_">console</span>.<span class="title function_">log</span>(res))</span><br><span class="line">  .<span class="title function_">then</span>()</span><br><span class="line">  .<span class="title function_">then</span>()</span><br><span class="line">  .<span class="title function_">then</span>(<span class="function"><span class="params">res</span>=&gt;</span><span class="variable language_">console</span>.<span class="title function_">log</span>(res))</span><br><span class="line">  .<span class="title function_">catch</span>(<span class="function"><span class="params">err</span>=&gt;</span><span class="variable language_">console</span>.<span class="title function_">log</span>(err));</span><br></pre></td></tr></table></figure><h5 id="5-状态依赖-promise状态-p2依赖于p1的状态"><a href="#5-状态依赖-promise状态-p2依赖于p1的状态" class="headerlink" title="5. 状态依赖;promise状态  p2依赖于p1的状态"></a>5. 状态依赖;promise状态  p2依赖于p1的状态</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> p1=<span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve,reject</span>)=&gt;</span>&#123;</span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">  <span class="title function_">reject</span>(<span class="string">&#x27;err&#x27;</span>);</span><br><span class="line">&#125;,<span class="number">3000</span>)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">const</span> p2=<span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve,reject</span>)=&gt;</span>&#123;</span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">  <span class="title function_">resolve</span>(p1);</span><br><span class="line">&#125;,<span class="number">1000</span>)</span><br><span class="line"><span class="comment">// resolve(p1);</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">p2.<span class="title function_">then</span>(<span class="function"><span class="params">res</span>=&gt;</span><span class="variable language_">console</span>.<span class="title function_">log</span>(res))</span><br><span class="line">  .<span class="title function_">catch</span>(<span class="function"><span class="params">err</span>=&gt;</span><span class="variable language_">console</span>.<span class="title function_">log</span>(err));</span><br></pre></td></tr></table></figure><h5 id="6-promise-all-promise-race"><a href="#6-promise-all-promise-race" class="headerlink" title="6. promise.all||promise.race"></a>6. promise.all||promise.race</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> p1=<span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve,reject</span>)=&gt;</span>&#123;</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">    <span class="title function_">resolve</span>(<span class="number">10</span>);</span><br><span class="line">  &#125;,<span class="number">1000</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> p2=<span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve,reject</span>)=&gt;</span>&#123;</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">    <span class="title function_">resolve</span>(<span class="number">20</span>);</span><br><span class="line">  &#125;,<span class="number">2000</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> p3=<span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve,reject</span>)=&gt;</span>&#123;</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">    <span class="title function_">resolve</span>(<span class="number">30</span>);</span><br><span class="line">  &#125;,<span class="number">3000</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> p4=<span class="title class_">Promise</span>.<span class="title function_">race</span>([p1,p2,p3]);</span><br><span class="line"><span class="comment">//let p4=Promise.all([p1,p2,p3]);</span></span><br><span class="line"></span><br><span class="line">p4.<span class="title function_">then</span>(<span class="function"><span class="params">res</span>=&gt;</span>&#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(res);</span><br><span class="line">&#125;,<span class="function"><span class="params">err</span>=&gt;</span>&#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(err);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h4 id="6-promise里的async和await"><a href="#6-promise里的async和await" class="headerlink" title="6.promise里的async和await"></a>6.promise里的async和await</h4><p>之前的readFile我们重新使用promise进行优化</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//readFile</span></span><br><span class="line">fs.<span class="title function_">readFile</span>(<span class="string">&#x27;./number.txt&#x27;</span>,<span class="string">&#x27;utf-8&#x27;</span>,<span class="function">(<span class="params">err,data</span>)=&gt;</span>&#123;</span><br><span class="line">  fs.<span class="title function_">readFile</span>(data,<span class="string">&#x27;utf-8&#x27;</span>,<span class="function">(<span class="params">err,data</span>)=&gt;</span>&#123;</span><br><span class="line">    fs.<span class="title function_">readFile</span>(data,<span class="string">&#x27;utf-8&#x27;</span>,<span class="function">(<span class="params">err,data</span>)=&gt;</span>&#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(data);</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>用promise的写法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">readFile</span>(<span class="params">filename</span>)&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve,reject</span>)=&gt;</span>&#123;</span><br><span class="line">    fs.<span class="title function_">readFile</span>(filename,<span class="string">&#x27;utf-8&#x27;</span>,<span class="function">(<span class="params">err,data</span>)=&gt;</span>&#123;</span><br><span class="line">      <span class="title function_">resolve</span>(data);</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">readFile</span>(<span class="string">&#x27;./name.txt&#x27;</span>)</span><br><span class="line">  .<span class="title function_">then</span>(<span class="function"><span class="params">res</span>=&gt;</span><span class="title function_">readFile</span>(res))</span><br><span class="line">  .<span class="title function_">then</span>(<span class="function"><span class="params">res</span>=&gt;</span><span class="title function_">readFile</span>(res))</span><br><span class="line">  .<span class="title function_">then</span>(<span class="function"><span class="params">res</span>=&gt;</span><span class="variable language_">console</span>.<span class="title function_">log</span>(res))</span><br></pre></td></tr></table></figure><p>做成通用方法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">promisify</span>(<span class="params">fn</span>)&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">function</span>(<span class="params">...args</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve,reject</span>)=&gt;</span>&#123;</span><br><span class="line">      <span class="title function_">fn</span>(...args,<span class="function">(<span class="params">err,data</span>)=&gt;</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(err)&#123;</span><br><span class="line">          <span class="title function_">reject</span>(err);</span><br><span class="line">          <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="title function_">resolve</span>(data)</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> readFile=<span class="title function_">promisify</span>(fs.<span class="property">readFile</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">//./name.txt-&gt;./number.txt-&gt;./score.txt-&gt;100</span></span><br><span class="line"><span class="title function_">readFile</span>(<span class="string">&#x27;./name.txt&#x27;</span>,<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">  .<span class="title function_">then</span>(<span class="function"><span class="params">res</span>=&gt;</span><span class="title function_">readFile</span>(res,<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line">  .<span class="title function_">then</span>(<span class="function"><span class="params">res</span>=&gt;</span><span class="title function_">readFile</span>(res,<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line">  .<span class="title function_">then</span>(<span class="function"><span class="params">res</span>=&gt;</span><span class="variable language_">console</span>.<span class="title function_">log</span>(res))</span><br></pre></td></tr></table></figure><p>使用生成器函数定义一个方法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span>* <span class="title function_">read</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="keyword">let</span> value1=<span class="keyword">yield</span> <span class="title function_">readFile</span>(<span class="string">&#x27;./name.txt&#x27;</span>,<span class="string">&#x27;utf-8&#x27;</span>);</span><br><span class="line">  <span class="keyword">let</span> value2=<span class="keyword">yield</span> <span class="title function_">readFile</span>(value1,<span class="string">&#x27;utf-8&#x27;</span>);</span><br><span class="line">  <span class="keyword">let</span> value3=<span class="keyword">yield</span> <span class="title function_">readFile</span>(value2,<span class="string">&#x27;utf-8&#x27;</span>);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(value3);</span><br><span class="line">&#125;  </span><br><span class="line"></span><br><span class="line"><span class="comment">//执行器逻辑</span></span><br><span class="line"><span class="keyword">let</span> iter=<span class="title function_">read</span>();</span><br><span class="line"><span class="keyword">let</span> &#123;value,done&#125;=iter.<span class="title function_">next</span>();</span><br><span class="line">value.<span class="title function_">then</span>(val1=&#123;</span><br><span class="line">  <span class="keyword">let</span> &#123;value,done&#125;=iter.<span class="title function_">next</span>(val1);</span><br><span class="line">  value.<span class="title function_">then</span>(<span class="function"><span class="params">val2</span>=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> &#123;value,done&#125;=iter.<span class="title function_">next</span>(val2);</span><br><span class="line">    value.<span class="title function_">then</span>(<span class="function"><span class="params">val3</span>=&gt;</span>&#123;</span><br><span class="line">      iter.<span class="title function_">next</span>(val3);</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>将执行器的逻辑封装成一个执行器函数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 执行器函数</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Co</span>(<span class="params">iter</span>)&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve,reject</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> next=<span class="keyword">function</span>(<span class="params">data</span>)&#123;</span><br><span class="line">      <span class="keyword">let</span>&#123;value,data&#125;=iter.<span class="title function_">next</span>(data);</span><br><span class="line">      <span class="keyword">if</span>(done)&#123;</span><br><span class="line">        <span class="title function_">resolve</span>(data);</span><br><span class="line">      &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        value.<span class="title function_">then</span>(<span class="function"><span class="params">val</span>=&gt;</span>&#123;</span><br><span class="line">          <span class="title function_">next</span>(val)</span><br><span class="line">        &#125;,reject)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">next</span>();</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> promise=<span class="title class_">Co</span>(<span class="title function_">read</span>());</span><br><span class="line">promise.<span class="title function_">then</span>(<span class="function"><span class="params">res</span>=&gt;</span>&#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(res);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>将整体换成async函数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">readSync</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="keyword">let</span> value1=<span class="keyword">await</span> <span class="title function_">readFile</span>(<span class="string">&#x27;./name.txt&#x27;</span>,<span class="string">&#x27;utf-8&#x27;</span>);</span><br><span class="line">  <span class="keyword">let</span> value2=<span class="keyword">await</span> <span class="title function_">readFile</span>(value1,<span class="string">&#x27;utf-8&#x27;</span>);</span><br><span class="line">  <span class="keyword">let</span> value3=<span class="keyword">await</span> <span class="title function_">readFile</span>(value2,<span class="string">&#x27;utf-8&#x27;</span>);</span><br><span class="line">  <span class="keyword">return</span> value3</span><br><span class="line">&#125;  </span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> promise1=<span class="title function_">readSync</span>();</span><br><span class="line">promise1.<span class="title function_">then</span>(<span class="keyword">function</span>(<span class="params">res</span>)&#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(res)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>迭代 遍历 生成器</title>
      <link href="/2022/06/25/%E7%94%9F%E6%88%90%E5%99%A8%E5%92%8C%E8%BF%AD%E4%BB%A3%E5%99%A8/"/>
      <url>/2022/06/25/%E7%94%9F%E6%88%90%E5%99%A8%E5%92%8C%E8%BF%AD%E4%BB%A3%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<h4 id="1-迭代器"><a href="#1-迭代器" class="headerlink" title="1. 迭代器"></a>1. 迭代器</h4><p>迭代器创造是为了所有的数据类型能有一种统一的方式去遍历<br>通过for循环遍历各个数据类型的方法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]</span><br><span class="line"><span class="keyword">var</span> str=<span class="string">&#x27;123&#x27;</span>;</span><br><span class="line"><span class="keyword">var</span> obj=&#123;<span class="attr">a</span>:<span class="number">1</span>,<span class="attr">b</span>:<span class="number">2</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; arr.<span class="property">length</span>; i++) &#123;</span><br><span class="line"> <span class="variable language_">console</span>.<span class="title function_">log</span>(arr[i])</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; str.<span class="property">length</span>; i++) &#123;</span><br><span class="line"> <span class="variable language_">console</span>.<span class="title function_">log</span>(str[i]);</span><br><span class="line">&#125;</span><br><span class="line">arr.<span class="title function_">forEach</span>(<span class="keyword">function</span>(<span class="params">item</span>)&#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(item);</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> i <span class="keyword">in</span> obj)&#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(i,obj[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">test</span>(<span class="params"></span>)&#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>([...<span class="variable language_">arguments</span>]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">test</span>(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>)</span><br></pre></td></tr></table></figure><h4 id="2-数据类型"><a href="#2-数据类型" class="headerlink" title="2.数据类型"></a>2.数据类型</h4><p>js中的数据类型有Array,Map,Set,String,TypeArray,arguments,NodeList<br>Symbol(Symbol.iterator)<br>实现一个迭代器</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">makeInterator</span>(<span class="params">arr</span>)&#123;</span><br><span class="line">  <span class="keyword">var</span> index=<span class="number">0</span>;</span><br><span class="line">  <span class="keyword">return</span>&#123;</span><br><span class="line">    <span class="title function_">next</span>(<span class="params"></span>)&#123;</span><br><span class="line">      <span class="keyword">if</span>(index&lt;arr.<span class="property">length</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span>&#123;</span><br><span class="line">          <span class="attr">value</span>:arr[index],<span class="attr">done</span>:<span class="literal">false</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span>&#123;<span class="attr">value</span>:<span class="literal">undefined</span>,<span class="attr">done</span>:<span class="literal">true</span>&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过for…of…循环数据类型</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]</span><br><span class="line"><span class="keyword">var</span> str=<span class="string">&#x27;123&#x27;</span>;</span><br><span class="line"><span class="keyword">var</span> obj=&#123;<span class="attr">a</span>:<span class="number">1</span>,<span class="attr">b</span>:<span class="number">2</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//obj原型上没有迭代器</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> i <span class="keyword">of</span> str)&#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(i)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> i <span class="keyword">of</span> arr)&#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(i)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> i <span class="keyword">of</span> obj)&#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(i)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们发现obj的原型上没有迭代器<br>自定义一个obj迭代器</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj=&#123;</span><br><span class="line">  <span class="attr">a</span>:<span class="number">1</span>,</span><br><span class="line">  <span class="attr">b</span>:<span class="number">2</span>,</span><br><span class="line">  <span class="attr">c</span>:<span class="number">3</span>,</span><br><span class="line">  [<span class="title class_">Symbol</span>.<span class="property">iterator</span>]:<span class="keyword">function</span>*()&#123;</span><br><span class="line">    <span class="keyword">var</span> index=<span class="number">0</span>;</span><br><span class="line">    <span class="comment">//map实现对象映射</span></span><br><span class="line">    <span class="comment">//keys键,values值,entries键值对</span></span><br><span class="line">    <span class="keyword">let</span> map=<span class="keyword">new</span> <span class="title class_">Map</span>();</span><br><span class="line">    map.<span class="title function_">set</span>(<span class="string">&#x27;a&#x27;</span>,<span class="number">1</span>)</span><br><span class="line">    map.<span class="title function_">set</span>(<span class="string">&#x27;b&#x27;</span>,<span class="number">2</span>)</span><br><span class="line">    map.<span class="title function_">set</span>(<span class="string">&#x27;c&#x27;</span>,<span class="number">3</span>)</span><br><span class="line">    <span class="comment">// return&#123;</span></span><br><span class="line">    <span class="comment">//   next()&#123;</span></span><br><span class="line">    <span class="comment">//     var mapEntries=[...map.entries()];</span></span><br><span class="line">    <span class="comment">//     console.log(map.entries);</span></span><br><span class="line">    <span class="comment">//     if(index&lt;map.size)&#123;</span></span><br><span class="line">    <span class="comment">//       return&#123;</span></span><br><span class="line">    <span class="comment">//         value:map.entries[index++],done:false</span></span><br><span class="line">    <span class="comment">//       &#125;</span></span><br><span class="line">    <span class="comment">//     &#125;</span></span><br><span class="line">    <span class="comment">//     return&#123;value:undefined,done:true&#125;;</span></span><br><span class="line">    <span class="comment">//   &#125;</span></span><br><span class="line">    <span class="comment">// &#125;</span></span><br><span class="line">    <span class="keyword">var</span> mapEntries=[...map.<span class="title function_">entries</span>()];</span><br><span class="line">    <span class="keyword">while</span>(index&lt;mapEntries.<span class="property">length</span>)&#123;</span><br><span class="line">      <span class="keyword">yield</span> mapEntries[index++];</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-遍历和迭代有什么区别"><a href="#3-遍历和迭代有什么区别" class="headerlink" title="3.遍历和迭代有什么区别"></a>3.遍历和迭代有什么区别</h4><p>迭代有明确的方式<br>从目标源依次逐个抽取的方式来提取数据<br>目标源:<br>1.有序的;<br>2.连续的;</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> iter=obj[<span class="title class_">Symbol</span>.<span class="property">iterator</span>]();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(iter.<span class="title function_">next</span>());</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(iter.<span class="title function_">next</span>());</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(iter.<span class="title function_">next</span>());</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(iter.<span class="title function_">next</span>());</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i <span class="keyword">of</span> obj)&#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4-生成器是为了生成迭代器"><a href="#4-生成器是为了生成迭代器" class="headerlink" title="4. 生成器是为了生成迭代器"></a>4. 生成器是为了生成迭代器</h4><p>生成器的返回值由yield来决定,和return无关,return只会返回一个迭代器对象<br>yield可以中断函数的执行</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span>* <span class="title function_">test</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="keyword">yield</span> <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">yield</span> <span class="number">2</span>;</span><br><span class="line">  <span class="keyword">yield</span> <span class="number">3</span>;</span><br><span class="line">  <span class="keyword">yield</span> <span class="number">4</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> iter=<span class="title function_">test</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// console.log(iter.next());</span></span><br><span class="line"><span class="comment">// console.log(iter.next());</span></span><br><span class="line"><span class="comment">// console.log(iter.next());</span></span><br><span class="line"><span class="comment">// console.log(iter.next());</span></span><br><span class="line"><span class="comment">// console.log(iter.next());</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i <span class="keyword">of</span> iter)&#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>async本质上是生成器函数+执行器函数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span>* <span class="title function_">test</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="keyword">let</span> value1=<span class="keyword">yield</span> <span class="number">1</span>;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(value1);<span class="comment">//two</span></span><br><span class="line">  <span class="keyword">let</span> value2=<span class="keyword">yield</span> <span class="number">2</span>;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(value2);<span class="comment">//three</span></span><br><span class="line">  <span class="keyword">let</span> value3=<span class="keyword">yield</span> <span class="number">3</span>;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(value3);<span class="comment">//four</span></span><br><span class="line">  <span class="keyword">let</span> value4=<span class="keyword">yield</span> <span class="number">4</span>;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(value4);<span class="comment">//undefined</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> iter=<span class="title function_">test</span>();</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(iter.<span class="title function_">next</span>(<span class="string">&#x27;one&#x27;</span>));</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(iter.<span class="title function_">next</span>(<span class="string">&#x27;two&#x27;</span>));</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(iter.<span class="title function_">next</span>(<span class="string">&#x27;three&#x27;</span>));</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(iter.<span class="title function_">next</span>(<span class="string">&#x27;four&#x27;</span>));</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(iter.<span class="title function_">next</span>());</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>什么是ajax</title>
      <link href="/2022/06/24/%E4%BB%80%E4%B9%88%E6%98%AFajax/"/>
      <url>/2022/06/24/%E4%BB%80%E4%B9%88%E6%98%AFajax/</url>
      
        <content type="html"><![CDATA[<h3 id="什么是-AJAX？"><a href="#什么是-AJAX？" class="headerlink" title="什么是 AJAX？"></a>什么是 AJAX？</h3><p>AJAX 是异步的 JavaScript 和 XML（Asynchronous JavaScript And XML）。简单点说，就是使用 XMLHttpRequest 对象与服务器通信。 它可以使用 JSON，XML，HTML 和 text 文本等格式发送和接收数据。AJAX 最吸引人的就是它的“异步”特性，也就是说它可以在不重新刷新页面的情况下与服务器通信，交换数据，或更新页面。</p><p>你可以使用 AJAX 最主要的两个特性做下列事：</p><ul><li>在不重新加载页面的情况下发送请求给服务器。</li><li>接受并使用从服务器发来的数据。<h3 id="ajax请求"><a href="#ajax请求" class="headerlink" title="ajax请求"></a>ajax请求</h3>一个ajax请求会包含以下四步:<h4 id="1-创建XHR对象"><a href="#1-创建XHR对象" class="headerlink" title="1.创建XHR对象"></a>1.创建XHR对象</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> xhr;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="variable language_">window</span>.<span class="property">XMLHttpRequest</span>)&#123;</span><br><span class="line"></span><br><span class="line">xhr=<span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>()<span class="comment">//ie7+</span></span><br><span class="line"></span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">xhr=<span class="keyword">new</span> <span class="title class_">ActiveXobject</span>(<span class="string">&#x27;Microsoft.XMLHTTP&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-发送HTTP请求；"><a href="#2-发送HTTP请求；" class="headerlink" title="2.发送HTTP请求；"></a>2.发送HTTP请求；</h4>HTTP请求的方式会分为简单请求和复杂请求<br>简单请求:get<br>复杂请求:POST HEAD OPTIONS put DELETE CONNECT TRACE<h5 id="get和post有什么区别"><a href="#get和post有什么区别" class="headerlink" title="get和post有什么区别?"></a>get和post有什么区别?</h5></li></ul><ol><li>POST更安全<br>不会作为url的一部分、不会被缓存，保存在服务器日志和浏览器记录中</li><li>POST发送的数据量更大(GET有url长度显示)<br>长度限制：ie(2083字符)firefox(65536字符)chrome(8182字符)safari(80000字符)opera(190000字符)</li><li>POST能发送更多类型的数据(各种类型的文件)<br>GET只能发送ASCII字符<h5 id="HEAD-OPTIONS-put-delete-connect-trace为什么不用"><a href="#HEAD-OPTIONS-put-delete-connect-trace为什么不用" class="headerlink" title="HEAD OPTIONS put delete connect trace为什么不用"></a>HEAD OPTIONS put delete connect trace为什么不用</h5></li><li>安全性</li><li>不建议前端操作后端的数据<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">xhr.<span class="title function_">open</span>(<span class="string">&#x27;get&#x27;</span>,<span class="string">&#x27;url&#x27;</span>,<span class="literal">true</span>):<span class="comment">//请求的方式:</span></span><br><span class="line">xhr.<span class="title function_">send</span>();</span><br></pre></td></tr></table></figure><h4 id="3-接受服务器给前端的结果"><a href="#3-接受服务器给前端的结果" class="headerlink" title="3.接受服务器给前端的结果"></a>3.接受服务器给前端的结果</h4>xhr.readyState一共有5种状态<br>0 (未初始化) or (请求还未初始化)<br>1 (正在加载) or (已建立服务器链接)<br>2 (加载成功) or (请求已接受)<br>3 (交互) or (正在处理请求)<br>4 (完成) or (请求已完成并且响应已准备好)<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">xhr.<span class="property">onreadystatechange</span>=<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">​ <span class="keyword">if</span>(xhr.<span class="property">readyState</span>===<span class="number">4</span>)&#123;</span><br><span class="line">   <span class="keyword">if</span>(xhr.<span class="property">status</span>&gt;=<span class="number">200</span>&amp;&amp;xhr.<span class="property">status</span>&lt;<span class="number">300</span>||xhr.<span class="property">status</span>==<span class="number">304</span>)&#123;</span><br><span class="line">​xhr.<span class="property">responseText</span></span><br><span class="line"><span class="comment">//所有的返回值都挂载在xhr上，常用的属性有以下四个</span></span><br><span class="line"><span class="comment">//status</span></span><br><span class="line"><span class="comment">//responseText:文本;</span></span><br><span class="line"><span class="comment">//respinseXML:XML;&#x27;application/xml&#x27;:&#x27;text/xml&#x27;</span></span><br><span class="line"><span class="comment">//statusText;</span></span><br><span class="line">  &#125;;</span><br><span class="line">​ &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4-处理服务器给到的结果"><a href="#4-处理服务器给到的结果" class="headerlink" title="4.处理服务器给到的结果"></a>4.处理服务器给到的结果</h4>视情况而定</li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>闭包</title>
      <link href="/2022/06/23/%E9%97%AD%E5%8C%85/"/>
      <url>/2022/06/23/%E9%97%AD%E5%8C%85/</url>
      
        <content type="html"><![CDATA[<h3 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h3><h4 id="闭包定义"><a href="#闭包定义" class="headerlink" title="闭包定义"></a>闭包定义</h4><h5 id="1-犀牛书的定义"><a href="#1-犀牛书的定义" class="headerlink" title="1. 犀牛书的定义"></a>1. 犀牛书的定义</h5><p>   函数变量可以保存在函数作用域内</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params"></span>)&#123;</span><br><span class="line">   <span class="keyword">var</span> n=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(n);</span><br></pre></td></tr></table></figure><h5 id="2-高级程序设计"><a href="#2-高级程序设计" class="headerlink" title="2. 高级程序设计"></a>2. 高级程序设计</h5><p>   闭包是指有权访问另一个函数作用域中等变量的函数(函数没导出);</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params"></span>)&#123;</span><br><span class="line">   <span class="keyword">var</span> n=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">function</span> <span class="title function_">bar</span>(<span class="params"></span>)&#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(n);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="title function_">bar</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">foo</span>();</span><br></pre></td></tr></table></figure><h5 id="3-你不知道的JavaScript"><a href="#3-你不知道的JavaScript" class="headerlink" title="3. 你不知道的JavaScript"></a>3. 你不知道的JavaScript</h5><p>   当函数可以记住并访问所在的此法作用域时，就产生了闭包，即使函数是在当前函数作用域之外执行(函数导出)</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params"></span>)&#123;</span><br><span class="line">   <span class="keyword">var</span> n=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">return</span> <span class="keyword">function</span> <span class="title function_">bar</span>(<span class="params"></span>)&#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(n);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">foo</span>()();</span><br></pre></td></tr></table></figure><h5 id="4-MDN"><a href="#4-MDN" class="headerlink" title="4. MDN"></a>4. MDN</h5><p>   一个函数和对其周围状态（lexical environment，词法环境）的引用捆绑在一起（或者说函数被引用包围），这样的组合就是闭包（closure）</p><h5 id="5-总结"><a href="#5-总结" class="headerlink" title="5. 总结"></a>5. 总结</h5><p>   当函数的执行,导致函数被定义,并抛出;<br>   函数嵌套，函数导出，可访问父函数作用域</p><h4 id="闭包的形式"><a href="#闭包的形式" class="headerlink" title="闭包的形式"></a>闭包的形式</h4><p>从定义出发<br>1.当函数的执行,导致函数被定义<br>2.闭包和函数的定义有关<br>3.this和函数的执行方式有关<br>形式体现</p><ol><li>函数的返回值是函数<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params">fn</span>)&#123;</span><br><span class="line">   <span class="keyword">var</span> n=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">return</span> <span class="keyword">function</span>(<span class="params"></span>)&#123;&#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">foo</span>(test)</span><br></pre></td></tr></table></figure></li><li>返回的变量是函数<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params">fn</span>)&#123;</span><br><span class="line">   <span class="keyword">var</span> n=<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">return</span> n;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">foo</span>()();</span><br></pre></td></tr></table></figure></li><li>全局变量定义的闭包<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> outter;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params">fn</span>)&#123;</span><br><span class="line">   <span class="keyword">var</span> a=<span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">   outter=<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(a);<span class="comment">//10</span></span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">foo</span>()();</span><br><span class="line"><span class="title function_">outter</span>();</span><br></pre></td></tr></table></figure></li><li>函数的参数的方式:<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> inner = <span class="keyword">function</span>(<span class="params">fn</span>)&#123;</span><br><span class="line">   <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">fn</span>())</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params"></span>)&#123;</span><br><span class="line">   <span class="keyword">var</span> b=<span class="string">&#x27;local&#x27;</span>;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">var</span> n=<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">      <span class="keyword">return</span> b;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="title function_">inner</span>(n);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">foo</span>();</span><br></pre></td></tr></table></figure></li></ol><h4 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h4><h5 id="1-循环赋值的问题"><a href="#1-循环赋值的问题" class="headerlink" title="1. 循环赋值的问题"></a>1. 循环赋值的问题</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params"></span>)&#123;</span><br><span class="line">   <span class="keyword">var</span> arr=[];</span><br><span class="line">   <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++)&#123;</span><br><span class="line">      arr[i]=<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">         <span class="variable language_">console</span>.<span class="title function_">log</span>(i);</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">return</span> arr;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> bar=<span class="title function_">foo</span>();</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> j=<span class="number">0</span>;j&lt;<span class="number">10</span>;j++)&#123;</span><br><span class="line">   bar[j]();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//输出10个10</span></span><br></pre></td></tr></table></figure><p>本来的目的是想输出循环的0-9，结果输出了10个10，接下来对函数结构进行改造达到目的</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params"></span>)&#123;</span><br><span class="line">   <span class="keyword">var</span> arr=[];</span><br><span class="line">   <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++)&#123;</span><br><span class="line">      arr[i]=(<span class="keyword">function</span>(<span class="params">j</span>)&#123;</span><br><span class="line">         <span class="keyword">return</span> <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(j)</span><br><span class="line">         &#125;;</span><br><span class="line">      &#125;)(i);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">return</span> arr;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> bar=<span class="title function_">foo</span>();</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> j=<span class="number">0</span>;j&lt;<span class="number">10</span>;j++)&#123;</span><br><span class="line">   bar[j]();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="2-迭代器"><a href="#2-迭代器" class="headerlink" title="2. 迭代器"></a>2. 迭代器</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> add=(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">   <span class="keyword">var</span> count=<span class="number">0</span>;</span><br><span class="line">   <span class="keyword">return</span> <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">      <span class="keyword">return</span> ++count;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;)();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">add</span>());</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>深浅拷贝</title>
      <link href="/2022/06/22/%E6%B7%B1%E6%B5%85%E6%8B%B7%E8%B4%9D/"/>
      <url>/2022/06/22/%E6%B7%B1%E6%B5%85%E6%8B%B7%E8%B4%9D/</url>
      
        <content type="html"><![CDATA[<h3 id="1-为什么需要拷贝"><a href="#1-为什么需要拷贝" class="headerlink" title="1.为什么需要拷贝"></a>1.为什么需要拷贝</h3><p>数值类型的拷贝</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">var</span> b=a;</span><br><span class="line">a=<span class="number">3</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(b);<span class="comment">//1</span></span><br></pre></td></tr></table></figure><p>对象类型的拷贝</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a=&#123;</span><br><span class="line">  <span class="attr">a</span>:<span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> b=a;</span><br><span class="line">a.<span class="property">a</span>=<span class="number">2</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(b);<span class="comment">//&#123;a:2&#125;</span></span><br></pre></td></tr></table></figure><p>我们会发现在对象类型中如果只是简单的赋值，拷贝出来的对象里的值会跟着原对象发生改变，很明显这不是我们需要的效果</p><h4 id="2-拷贝："><a href="#2-拷贝：" class="headerlink" title="2.拷贝："></a>2.拷贝：</h4><h5 id="浅拷贝"><a href="#浅拷贝" class="headerlink" title="浅拷贝"></a>浅拷贝</h5><p>浅拷贝（简单拷贝）拷贝对象的一层</p><p>es3的实现方式</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj=&#123;</span><br><span class="line">  <span class="attr">a</span>:<span class="number">1</span>,</span><br><span class="line">  <span class="attr">b</span>:<span class="number">2</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">simpleClone</span>(<span class="params">obj</span>)&#123;</span><br><span class="line">  <span class="keyword">var</span> cloneObj=&#123;&#125;;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">var</span> i <span class="keyword">in</span> obj)&#123;</span><br><span class="line">    cloneObj[i]=obj[i];</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> cloneObj;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>es6中的实现方式</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj=&#123;</span><br><span class="line">  <span class="attr">a</span>:<span class="number">1</span>,</span><br><span class="line">  <span class="attr">b</span>:<span class="number">2</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">simpleClone</span>(<span class="params">obj</span>)&#123;</span><br><span class="line">  <span class="keyword">var</span> cloneObj=&#123;&#125;;</span><br><span class="line">  <span class="comment">//for(var key of Object.keys(obj))&#123;</span></span><br><span class="line">  <span class="comment">//  cloneObj[key]=obj[key];</span></span><br><span class="line">  <span class="comment">//&#125;</span></span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">var</span> [key,value] <span class="keyword">of</span> <span class="title class_">Object</span>.<span class="title function_">entries</span>(obj))&#123;</span><br><span class="line">    cloneObj[key]=value;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> cloneObj;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>es5中的实现方式</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj=&#123;</span><br><span class="line">  <span class="attr">a</span>:<span class="number">1</span>,</span><br><span class="line">  <span class="attr">b</span>:<span class="number">2</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">simpleClone</span>(<span class="params">obj</span>)&#123;</span><br><span class="line">  <span class="keyword">var</span> cloneObj=&#123;&#125;;</span><br><span class="line">  <span class="title class_">Object</span>.<span class="title function_">getOwnPropertyNames</span>(obj).<span class="title function_">forEach</span>(<span class="keyword">function</span>(<span class="params">key</span>)&#123;</span><br><span class="line">    <span class="keyword">var</span> des=<span class="title class_">Object</span>.<span class="title function_">getOwnPropertyDescriptor</span>(obj,key)</span><br><span class="line">    <span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(cloneObj,key,des)</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">return</span> cloneObj;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="深拷贝"><a href="#深拷贝" class="headerlink" title="深拷贝"></a>深拷贝</h5><p>深拷贝会拷贝原对象里的所有内容</p><ol><li>深拷贝的普通实现<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj=&#123;</span><br><span class="line">  <span class="attr">a</span>:<span class="number">1</span>,</span><br><span class="line">  <span class="attr">b</span>:&#123;</span><br><span class="line">    <span class="attr">c</span>:<span class="number">3</span>,</span><br><span class="line">    <span class="attr">d</span>:&#123;</span><br><span class="line">      <span class="attr">e</span>:<span class="number">5</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">deepClone</span>(<span class="params">obj</span>)&#123;</span><br><span class="line">  <span class="keyword">var</span> cloneObj=&#123;&#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">var</span> i <span class="keyword">in</span> obj)&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">typeof</span> obj[i]===<span class="string">&#x27;object&#x27;</span>&amp;&amp;obj[i]!==<span class="literal">null</span>)&#123;</span><br><span class="line">      cloneObj[i]=&#123;&#125;;</span><br><span class="line">      <span class="keyword">for</span>(<span class="keyword">var</span> j <span class="keyword">in</span> obj[i])&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">typeof</span> obj[i][j]===<span class="string">&#x27;object&#x27;</span>&amp;&amp;obj[i][j]!==<span class="literal">null</span>)&#123;</span><br><span class="line">          cloneObj[i][j]=&#123;&#125;;</span><br><span class="line">          <span class="keyword">for</span>(<span class="keyword">var</span> k <span class="keyword">in</span> obj[i][j])&#123;</span><br><span class="line">            cloneObj[i][j][k]=obj[i][j][k];</span><br><span class="line">          &#125;</span><br><span class="line"></span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">          cloneObj[i][j]=obj[i][j];</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    </span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">      cloneObj[i]=obj[i];</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> cloneObj;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> obj1=<span class="title function_">deepClone</span>(obj);</span><br><span class="line">obj.<span class="property">b</span>.<span class="property">c</span>=<span class="number">10</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj1);</span><br></pre></td></tr></table></figure></li><li>深拷贝的递归实现方式<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj=&#123;</span><br><span class="line">  <span class="attr">a</span>:<span class="number">1</span>,</span><br><span class="line">  <span class="attr">b</span>:&#123;</span><br><span class="line">    <span class="attr">c</span>:<span class="number">3</span>,</span><br><span class="line">    <span class="attr">d</span>:&#123;</span><br><span class="line">      <span class="attr">e</span>:<span class="number">5</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">deepClone</span>(<span class="params">obj,cloneObj</span>)&#123;</span><br><span class="line">  <span class="keyword">var</span> cloneObj=cloneObj||&#123;&#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">var</span> i <span class="keyword">in</span> obj)&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">typeof</span> obj[i]===<span class="string">&#x27;object&#x27;</span>&amp;&amp;obj[i]!==<span class="literal">null</span>)&#123;</span><br><span class="line">      cloneObj[i]=&#123;&#125;;</span><br><span class="line">      <span class="title function_">deepClone</span>(obj[i],cloneObj[i]);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">      cloneObj[i]=obj[i];</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> cloneObj;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> obj1=<span class="title function_">deepClone</span>(obj);</span><br><span class="line">obj.<span class="property">b</span>.<span class="property">c</span>=<span class="number">10</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj1);</span><br></pre></td></tr></table></figure>深拷贝的数组判断<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj=&#123;</span><br><span class="line">  <span class="attr">a</span>:<span class="number">1</span>,</span><br><span class="line">  <span class="attr">b</span>:&#123;</span><br><span class="line">    <span class="attr">c</span>:<span class="number">3</span>,</span><br><span class="line">    <span class="attr">d</span>:&#123;</span><br><span class="line">      <span class="attr">e</span>:<span class="number">5</span>,</span><br><span class="line">      <span class="attr">f</span>:[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">deepClone</span>(<span class="params">obj,cloneObj</span>)&#123;</span><br><span class="line">  <span class="keyword">var</span> cloneObj=cloneObj||&#123;&#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">var</span> i <span class="keyword">in</span> obj)&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">typeof</span> obj[i]===<span class="string">&#x27;object&#x27;</span>&amp;&amp;obj[i]!==<span class="literal">null</span>)&#123;</span><br><span class="line">      <span class="comment">// cloneObj[i]=Array.isArray(obj[i])?[]:&#123;&#125;;</span></span><br><span class="line">      <span class="comment">// cloneObj[i]=obj[i] instanceof Array?[]:&#123;&#125;;</span></span><br><span class="line">      cloneObj[i]=<span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">toString</span>.<span class="title function_">call</span>(obj[i])===<span class="string">&#x27;[object Array]&#x27;</span>?[]:&#123;&#125;;</span><br><span class="line">      <span class="title function_">deepClone</span>(obj[i],cloneObj[i]);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">      cloneObj[i]=obj[i];</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> cloneObj;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> obj1=<span class="title function_">deepClone</span>(obj);</span><br><span class="line">obj.<span class="property">b</span>.<span class="property">c</span>=<span class="number">10</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj1);</span><br></pre></td></tr></table></figure></li><li>深拷贝的不同实现方式<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj=&#123;</span><br><span class="line">  <span class="attr">a</span>:<span class="number">1</span>,</span><br><span class="line">  <span class="attr">b</span>:&#123;</span><br><span class="line">    <span class="attr">c</span>:<span class="number">3</span>,</span><br><span class="line">    <span class="attr">d</span>:&#123;</span><br><span class="line">      <span class="attr">e</span>:<span class="number">5</span>,</span><br><span class="line">      <span class="attr">f</span>:[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//JSON.parse JSON.stringify</span></span><br><span class="line"><span class="comment">// function deepClone(obj)&#123;</span></span><br><span class="line"><span class="comment">//   return JSON.parse(JSON.stringify(obj));</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//jquery</span></span><br><span class="line"><span class="comment">//function deepClone(obj)&#123;</span></span><br><span class="line"><span class="comment">//  return $.extent(true,&#123;&#125;,obj)</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"><span class="keyword">var</span> obj1=<span class="title function_">deepClone</span>(obj);</span><br><span class="line">obj.<span class="property">b</span>.<span class="property">c</span>=<span class="number">10</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj1);</span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>this的四种规则</title>
      <link href="/2022/06/21/this%E7%9A%84%E5%9B%9B%E7%A7%8D%E8%A7%84%E5%88%99/"/>
      <url>/2022/06/21/this%E7%9A%84%E5%9B%9B%E7%A7%8D%E8%A7%84%E5%88%99/</url>
      
        <content type="html"><![CDATA[<h3 id="this的四种规则"><a href="#this的四种规则" class="headerlink" title="this的四种规则"></a>this的四种规则</h3><h4 id="函数的独立调用"><a href="#函数的独立调用" class="headerlink" title="函数的独立调用"></a>函数的独立调用</h4><p>函数的独立调用 this默认指向window/node(相应的全局对象)</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">test</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>===<span class="variable language_">window</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">test</span>();<span class="comment">//true</span></span><br></pre></td></tr></table></figure><h4 id="1-默认绑定规则"><a href="#1-默认绑定规则" class="headerlink" title="1. 默认绑定规则"></a>1. 默认绑定规则</h4><p><code>console.log(this===window); //true </code></p><p>全局里的this指定window</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>===<span class="variable language_">window</span>); <span class="comment">//true </span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(&#123;&#125;===&#123;&#125;);<span class="comment">//false</span></span><br></pre></td></tr></table></figure><h4 id="2-隐式绑定规则"><a href="#2-隐式绑定规则" class="headerlink" title="2. 隐式绑定规则"></a>2. 隐式绑定规则</h4><p>隐式绑定规则-谁调用就指向谁(隐式丢失，参数赋值);</p><ol><li>先来举一个例子<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">var</span> obj=&#123;</span><br><span class="line">  <span class="attr">a</span>:<span class="number">2</span>,</span><br><span class="line">  <span class="attr">foo</span>:<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">obj.<span class="title function_">foo</span>();<span class="comment">//this指向obj</span></span><br></pre></td></tr></table></figure>函数本身有this，函数不执行则this毫无意义，函数执行的时候才会产生this指向，this指向是由当前的执行方式来确定的<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">var</span> obj=&#123;</span><br><span class="line">  <span class="attr">a</span>:<span class="number">2</span>,</span><br><span class="line">  <span class="attr">foo</span>:<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>);<span class="comment">//指向obj</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">test</span>(<span class="params"></span>)&#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">test</span>();<span class="comment">//this指向window，因为是函数的独立调用</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">obj.<span class="title function_">foo</span>();</span><br></pre></td></tr></table></figure></li><li>闭包中的this指向<br>闭包的定义可以理解为当函数执行导致函数被定义并抛出,所以闭包可以理解为一种现象<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">var</span> obj=&#123;</span><br><span class="line">  <span class="attr">a</span>:<span class="number">2</span>,</span><br><span class="line">  <span class="attr">foo</span>:<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>);<span class="comment">//指向obj</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">test</span>(<span class="params"></span>)&#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>);<span class="comment">//this指向window,因为函数独立调用了</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">test</span>();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">obj.<span class="title function_">foo</span>()();</span><br></pre></td></tr></table></figure></li><li>隐式丢失 变量赋值情况<br>如果函数定义了之后被赋值给了变量,则会存在隐式丢失的情况<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> obj=&#123;</span><br><span class="line">  <span class="attr">a</span>:<span class="number">2</span>,</span><br><span class="line">  <span class="attr">foo</span>:foo</span><br><span class="line">&#125;</span><br><span class="line">obj.<span class="title function_">foo</span>()<span class="comment">//this-&gt;obj</span></span><br><span class="line"><span class="keyword">var</span> bar=obj.<span class="property">foo</span>;<span class="comment">//方法被赋值的时候存在隐式丢失</span></span><br><span class="line"><span class="title function_">bar</span>();<span class="comment">//this-&gt;window,还是函数的立即执行</span></span><br></pre></td></tr></table></figure></li><li>参数赋值情况<br>父函数有能力决定子函数的this指向<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>);<span class="comment">//window</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">bar</span>(<span class="params">fn</span>)&#123;</span><br><span class="line">  <span class="comment">//console.log(this);</span></span><br><span class="line">  <span class="title function_">fn</span>();<span class="comment">//函数的独立调用</span></span><br><span class="line">  fn.<span class="title function_">call</span>(obj);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//api接口指定的 文档中指定的obj</span></span><br><span class="line"><span class="keyword">var</span> obj=&#123;</span><br><span class="line">  <span class="attr">a</span>:<span class="number">2</span>,</span><br><span class="line">  <span class="attr">foo</span>:foo</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//预编译过程中，实参被赋值为形参;(值的拷贝过程,浅拷贝)</span></span><br><span class="line"><span class="title function_">bar</span>(obj.<span class="property">foo</span>);<span class="comment">//this-&gt;window</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//回调函数，父函数，子函数，父函数有能力决定子函数的this指向</span></span><br><span class="line"><span class="keyword">var</span> arr=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line">arr.<span class="title function_">forEach</span>(<span class="keyword">function</span>(<span class="params">item,idx,arr</span>)&#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>)</span><br><span class="line">&#125;,obj)</span><br><span class="line">arr.<span class="title function_">sort</span>(<span class="keyword">function</span>(<span class="params">a,b</span>)&#123;</span><br><span class="line">  <span class="keyword">return</span> a-b;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">setInterval</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ol><h4 id="3-显式绑定规则"><a href="#3-显式绑定规则" class="headerlink" title="3. 显式绑定规则"></a>3. 显式绑定规则</h4><p><strong>call,apply,bind</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span>(<span class="params">a,b,c</span>)&#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(a,b,c)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> obj=&#123;</span><br><span class="line">  <span class="attr">a</span>:<span class="number">2</span>,</span><br><span class="line">  <span class="attr">foo</span>:foo</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> bar=obj.<span class="property">foo</span></span><br><span class="line"></span><br><span class="line">obj.<span class="title function_">foo</span>(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>)<span class="comment">//1,2,3</span></span><br><span class="line">bar.<span class="title function_">call</span>(obj,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>)<span class="comment">//1,2,3</span></span><br><span class="line">bar.<span class="title function_">apply</span>(obj,[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>])<span class="comment">//1,2,3</span></span><br><span class="line">bar.<span class="title function_">call</span>(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>)<span class="comment">//this-&gt;Number &#123;1&#125;//2,3</span></span><br><span class="line">bar.<span class="title function_">apply</span>(<span class="literal">undefined</span>,[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>])<span class="comment">//undefined,null没有包装类,绑定失败，调用默认this执行window</span></span><br><span class="line">bar.<span class="title function_">bind</span>(obj)(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>)<span class="comment">//1,2,3</span></span><br></pre></td></tr></table></figure><h4 id="4-new绑定规则"><a href="#4-new绑定规则" class="headerlink" title="4. new绑定规则"></a>4. new绑定规则</h4><p>this指向实例化对象</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="comment">//var this=&#123;&#125;;</span></span><br><span class="line">  <span class="comment">//this.a=1;</span></span><br><span class="line">  <span class="comment">//return this;</span></span><br><span class="line">  <span class="comment">//return的值为引用值会改变this指向</span></span><br><span class="line">  <span class="keyword">return</span> &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> person=<span class="keyword">new</span> <span class="title class_">Person</span>();</span><br></pre></td></tr></table></figure><h4 id="5-优先级"><a href="#5-优先级" class="headerlink" title="5. 优先级"></a>5. 优先级</h4><p><strong>new绑定&gt;显式绑定&gt;隐式绑定&gt;默认绑定</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj=&#123;</span><br><span class="line">  <span class="attr">a</span>:<span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line">(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>);</span><br><span class="line">&#125;).<span class="title function_">call</span>(obj)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> this </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>相等运算符</title>
      <link href="/2022/06/20/%E7%9B%B8%E7%AD%89%E8%BF%90%E7%AE%97%E7%AC%A6/"/>
      <url>/2022/06/20/%E7%9B%B8%E7%AD%89%E8%BF%90%E7%AE%97%E7%AC%A6/</url>
      
        <content type="html"><![CDATA[<h3 id="“-”"><a href="#“-”" class="headerlink" title="“==”"></a>“==”</h3><p>​        使用==时，不同类型的值也可以被看作相等。这样的结果可能会使那些资深的 JavaScript 开发者都感到困惑。我们用下面的表格给大家分析一下不同类型的值用相等运算符比较后的结果。</p><table><thead><tr><th align="center">类型（x）</th><th align="center">类型（y）</th><th align="center">结 果</th></tr></thead><tbody><tr><td align="center">null</td><td align="center">undefined</td><td align="center">true</td></tr><tr><td align="center">undefined</td><td align="center">null</td><td align="center">true</td></tr><tr><td align="center">数</td><td align="center">字符串</td><td align="center">x == toNumber(y)</td></tr><tr><td align="center">字符串</td><td align="center">数</td><td align="center">toNumber(x) == y</td></tr><tr><td align="center">布尔值</td><td align="center">任何类型</td><td align="center">toNumber(x) == y</td></tr><tr><td align="center">任何类型</td><td align="center">布尔值</td><td align="center">x == toNumber(y)</td></tr><tr><td align="center">字符串或数</td><td align="center">对象</td><td align="center">x == toPrimitive(y)</td></tr><tr><td align="center">对象</td><td align="center">字符串或数</td><td align="center">toPrimitive(x) == y</td></tr></tbody></table><p>如果 x 和 y 的类型相同，JavaScript 会用 equals 方法比较这两个值或对象。没有列在这个表格中的其他情况都会返回 false。</p><p><strong>toNumber</strong>和 <strong>toPrimitive</strong>方法是内部的，并根据以下表格对其进行估值。</p><h4 id="toNumber"><a href="#toNumber" class="headerlink" title="toNumber"></a>toNumber</h4><p>toNumber 方法对不同类型返回的结果如下。</p><table><thead><tr><th align="center">值类型</th><th align="center">结 果</th></tr></thead><tbody><tr><td align="center">undefined</td><td align="center">NAN</td></tr><tr><td align="center">null</td><td align="center">+0</td></tr><tr><td align="center">布尔值</td><td align="center">如果是true,返回1;如果是false返回+0</td></tr><tr><td align="center">数</td><td align="center">数对应的值</td></tr></tbody></table><h4 id="toPrimitive"><a href="#toPrimitive" class="headerlink" title="toPrimitive"></a>toPrimitive</h4><p>toPrimitive 方法对不同类型返回的结果如下。</p><table><thead><tr><th align="center">值类型</th><th align="center">结 果</th></tr></thead><tbody><tr><td align="center">对象</td><td align="center">如果对象的 valueOf 方法的结果是原始值，返回原始值；如果对象的 toString 方法返回</td></tr></tbody></table><p>用例子来验证一下表格中的结果。首先，我们知道下面的代码输出 true（字符串长度大于 1）。</p><p><code>console.log(&#39;packt&#39; ? true : false); </code></p><p>那么下面这行代码的结果呢？</p><p><code>console.log(&#39;packt&#39; == true); </code></p><p>输出是 false，为什么会这样呢？</p><p>​    首先，布尔值会被 toNumber 方法转成数，因此得到 packt == 1。 </p><p>​    其次，用 toNumber 转换字符串值。因为字符串包含字母，所以会被转成 NaN，表达式就变成了 NaN == 1，结果就是 false。</p><p>那么下面这行代码的结果呢？</p><p><code>console.log(&#39;packt&#39; == false); </code></p><p>输出也是 false，为什么呢？</p><p>​    首先，布尔值会被 toNumber 方法转成数，因此得到 packt == 0。 </p><p>​    其次，用 toNumber 转换字符串值。因为字符串包含字母，所以会被转成 NaN，表达式就变成了 NaN == 0，结果就是 false。</p><h3 id="“-”-1"><a href="#“-”-1" class="headerlink" title="“===”"></a>“===”</h3><p>那么===运算符呢？简单多了。如果比较的两个值类型不同，比较的结果就是 false。如果比较的两个值类型相同，结果会根据下表判断。</p><table><thead><tr><th align="center">类型（x）</th><th align="center">值</th><th align="center">结 果</th></tr></thead><tbody><tr><td align="center">数</td><td align="center">x 和 y 的值相同（但不是 NaN）</td><td align="center">true</td></tr><tr><td align="center">字符串</td><td align="center">x 和 y 是相同的字符</td><td align="center">true</td></tr><tr><td align="center">布尔值</td><td align="center">x 和 y 都是 true 或 false</td><td align="center">true</td></tr><tr><td align="center">对象</td><td align="center">x 和 y 引用同一个对象</td><td align="center">true</td></tr></tbody></table><p>如果 x 和 y 类型不同，结果就是 false。我们来看一些例子。</p><p><code>console.log(&#39;packt&#39; === true); // false </code></p><p>如果 x 和 y 类型不同，结果就是 false。我们来看一些例子。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;packt&#x27;</span> === <span class="literal">true</span>); <span class="comment">// false </span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;packt&#x27;</span> === <span class="string">&#x27;packt&#x27;</span>); <span class="comment">// true </span></span><br><span class="line"><span class="keyword">var</span> person1 = &#123;<span class="attr">name</span>:<span class="string">&#x27;John&#x27;</span>&#125;; </span><br><span class="line"><span class="keyword">var</span> person2 = &#123;<span class="attr">name</span>:<span class="string">&#x27;John&#x27;</span>&#125;; </span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(person1 === person2); <span class="comment">// false，不同的对象</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> JS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DOM部分方法精解</title>
      <link href="/2022/06/16/DOM%E9%83%A8%E5%88%86%E6%96%B9%E6%B3%95%E7%B2%BE%E8%A7%A3/"/>
      <url>/2022/06/16/DOM%E9%83%A8%E5%88%86%E6%96%B9%E6%B3%95%E7%B2%BE%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<h3 id="appendChild"><a href="#appendChild" class="headerlink" title="appendChild()"></a>appendChild()</h3><p>appendChild() 方法可向节点的子节点列表的末尾添加新的子节点.</p><p>提示：如果文档树中已经存在了newchild,它将从文档树中删除,然后重新插入它的新位置.如果newchild是DocumentFragment节点,则不会直接插入它,而是把它的子节点按序插入当前节点的 childNodes[] 数组的末尾.</p><p>通常情况下使用appendChild()方法转移某个列表项到另一个列表项.</p><h3 id="children"><a href="#children" class="headerlink" title="children"></a>children</h3><p>var children = node.children</p><p>返回一个HTMLCollection而非数组;HTMLCollection是DOM的子元素的一个活的有序集合node;可以通过Array.from()方法转换为数组;可以通过使用集合上的item()方法或使用JavaScript数组样式表示法来访问集合中的单个子节点.</p><p>如果该节点没有子元素,则children是一个空的列表length为0.</p>]]></content>
      
      
      
        <tags>
            
            <tag> JS DOM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>阻止浏览器默认行为</title>
      <link href="/2022/06/16/%E9%98%BB%E6%AD%A2%E6%B5%8F%E8%A7%88%E5%99%A8%E9%BB%98%E8%AE%A4%E8%A1%8C%E4%B8%BA/"/>
      <url>/2022/06/16/%E9%98%BB%E6%AD%A2%E6%B5%8F%E8%A7%88%E5%99%A8%E9%BB%98%E8%AE%A4%E8%A1%8C%E4%B8%BA/</url>
      
        <content type="html"><![CDATA[<h3 id="js阻止浏览器默认行为"><a href="#js阻止浏览器默认行为" class="headerlink" title="js阻止浏览器默认行为"></a>js阻止浏览器默认行为</h3><p>三种阻止事件执行的方式<br>1.event.preventDefault()<br>2.event.stopPropagation()<br>3.return false<br>event.preventDefault() 阻止特定事件的默认行为（只有 cancelable 设置为 true 的事件才可以使用），比如：点击 type=”submit” 的 input 标签提交表单，你在 onclick 事件处理中调用<br>event.preventDefault()方法， 那么在点击 submit 后就不会自动提交表单了。但是并不阻止事件冒泡。event.stopPropagation() 立即停止事件在 DOM 层次中的传播，即阻止事件冒泡。但是，并不阻止默认行为。<br>return false 之后的所有相关的触发事件和动作都不会被执行。阻止事件继续传播，事件冒泡和默认行为都被阻止。</p>]]></content>
      
      
      
        <tags>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>事件委托</title>
      <link href="/2022/06/16/%E4%BA%8B%E4%BB%B6%E5%A7%94%E6%89%98/"/>
      <url>/2022/06/16/%E4%BA%8B%E4%BB%B6%E5%A7%94%E6%89%98/</url>
      
        <content type="html"><![CDATA[<h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><p>一般来讲,会把一个或者一组元素的事件委托到它的父层或者更外层元素上,真正绑定事件的是外层元素,当事件响应到需要绑定的元素上时,会通过事件冒泡机制从而触发它的外层元素的绑定事件上,然后在外层元素上去执行函数.</p><h3 id="举个栗子"><a href="#举个栗子" class="headerlink" title="举个栗子"></a>举个栗子</h3><p>有三个同事要收快递,为了签收快递,有两种办法：一是三个人在公司门口等快递；二是委托收快递事件给前台代为签收.前台收到快递后,他会判断收件人是谁,然后按照收件人的要求签收,甚至代为付款.第二种方案还有一个优势,那就是即使公司里来了新员工,前台也会在收到其快递后核实并代为签收.</p><h3 id="优势"><a href="#优势" class="headerlink" title="优势"></a>优势</h3><p>所有的人都在公司门口等待签收,门口站不下,页面所有元素使用一个事件,页面受不了,既然是同一个事情,为了方便,就把这个事情委托给一个最合适的人去干,公司通畅,页面舒服.</p><h3 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;<span class="built_in">head</span> lang=<span class="string">&quot;en&quot;</span>&gt;</span><br><span class="line">    &lt;meta charset=<span class="string">&quot;UTF-8&quot;</span>&gt;</span><br><span class="line">    &lt;title&gt;&lt;/title&gt;</span><br><span class="line">    &lt;style&gt;</span><br><span class="line">        li &#123;</span><br><span class="line">            height: 30px;</span><br><span class="line">            line-height: 30px;</span><br><span class="line">            margin: 3px 0;</span><br><span class="line">            background-color: red;</span><br><span class="line">            cursor: pointer;</span><br><span class="line">        &#125;</span><br><span class="line">    &lt;/style&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;button&gt;创建4个移民li&lt;/button&gt;</span><br><span class="line">&lt;ul&gt;</span><br><span class="line">    &lt;li&gt;我是土著li&lt;/li&gt;</span><br><span class="line">    &lt;a href=<span class="string">&quot;#&quot;</span>&gt;我是土著li&lt;/a&gt;</span><br><span class="line">    &lt;li&gt;我是土著li&lt;/li&gt;</span><br><span class="line">    &lt;li&gt;我是土著li&lt;/li&gt;</span><br><span class="line">    &lt;a href=<span class="string">&quot;#&quot;</span>&gt;我是土著li&lt;/a&gt;</span><br><span class="line">    &lt;li&gt;我是土著li&lt;/li&gt;</span><br><span class="line">&lt;/ul&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    var liArr = document.getElementsByTagName(<span class="string">&quot;li&quot;</span>);</span><br><span class="line">    var ul = document.getElementsByTagName(<span class="string">&quot;ul&quot;</span>)[0];</span><br><span class="line">    var btn = document.getElementsByTagName(<span class="string">&quot;button&quot;</span>)[0];</span><br><span class="line">//    <span class="keyword">for</span>(var i=0;i&lt;liArr.length;i++)&#123;</span><br><span class="line">//        liArr[i].onclick = <span class="function"><span class="title">function</span></span> () &#123;</span><br><span class="line">//            alert(<span class="string">&quot;我是土著li&quot;</span>);</span><br><span class="line">//        &#125;</span><br><span class="line">//    &#125;</span><br><span class="line">    btn.onclick = <span class="function"><span class="title">function</span></span> () &#123;</span><br><span class="line">        <span class="keyword">for</span>(var i=1;i&lt;=4;i++)&#123;</span><br><span class="line">            var newLi = document.createElement(<span class="string">&quot;li&quot;</span>);</span><br><span class="line">            var newA = document.createElement(<span class="string">&quot;a&quot;</span>);</span><br><span class="line">            newLi.innerHTML = <span class="string">&quot;我是移民li&quot;</span>;</span><br><span class="line">            newA.innerHTML = <span class="string">&quot;我是移民a&quot;</span>;</span><br><span class="line">            newA.href = <span class="string">&quot;#&quot;</span>;</span><br><span class="line">            ul.appendChild(newLi);</span><br><span class="line">            ul.appendChild(newA);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    //普通的事件绑定,没有办法为新创建的元素绑定事件.所以我们要使用冒泡的特性,事件委托！</span><br><span class="line">    //事件委托</span><br><span class="line">    ul.onclick = <span class="keyword">function</span> (event) &#123;</span><br><span class="line">        //获取事件触动的时候传递过来的值</span><br><span class="line">        event = event || window.event;</span><br><span class="line">        var aaa = event.target?event.target:event.srcElement;</span><br><span class="line">        //判断标签名,如果是li标签弹窗</span><br><span class="line">        <span class="keyword">if</span>(aaa.tagName === <span class="string">&quot;LI&quot;</span>)&#123;</span><br><span class="line">            alert(<span class="string">&quot;我是li&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>事件委托是利用冒泡的特性实现的,适合使用的事件有：click,mousedown,mouseup,keydown,keyup,keypress.</p>]]></content>
      
      
      
        <tags>
            
            <tag> DOM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>清除浮动</title>
      <link href="/2022/06/16/%E6%B8%85%E9%99%A4%E6%B5%AE%E5%8A%A8/"/>
      <url>/2022/06/16/%E6%B8%85%E9%99%A4%E6%B5%AE%E5%8A%A8/</url>
      
        <content type="html"><![CDATA[<h2 id="浮动问题的产生"><a href="#浮动问题的产生" class="headerlink" title="浮动问题的产生:"></a>浮动问题的产生:</h2><pre><code>父盒子没有设置height,子盒子在父盒子中进行了float,那么由于父盒子的高度为0,下面的元素会自动补位,解决由于补位产生的问题叫浮动清除.</code></pre><h2 id="清除浮动的方式"><a href="#清除浮动的方式" class="headerlink" title="清除浮动的方式:"></a>清除浮动的方式:</h2><h3 id="方式一-使用overflow属性来清除浮动"><a href="#方式一-使用overflow属性来清除浮动" class="headerlink" title="方式一:使用overflow属性来清除浮动"></a>方式一:使用overflow属性来清除浮动</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">.clearfix&#123;</span><br><span class="line">overflow:hidden;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>先找到浮动盒子的父元素,再在父元素中添加一个属性:overflow:hidden,就是清除这个父元素中的子元素浮动对页面的负面影响.</p><p>PS:一般情况下也不会使用这种方式,因为overflow:hidden有可能造成新的问题,将不该隐藏的地方隐藏.</p><h3 id="方式二-使用额外标签法"><a href="#方式二-使用额外标签法" class="headerlink" title="方式二:使用额外标签法"></a>方式二:使用额外标签法</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">.clearfix&#123;</span><br><span class="line">　　 clear:both;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在浮动的盒子之下再放一个标签,在这个标签中使用clear:both,来清除浮动对页面的影响.</p><p>内部标签:会将这个浮动盒子的父盒子高度重新撑开.</p><p>外部标签:会将这个浮动盒子的影响清除,但是不会撑开父盒子.</p><p>PS:一般情况下不使用,因为这种清除浮动的方式会增加页面的标签,造成结构的混乱.</p><h3 id="方法三-使用伪类元素来清除浮动"><a href="#方法三-使用伪类元素来清除浮动" class="headerlink" title="方法三:使用伪类元素来清除浮动"></a>方法三:使用伪类元素来清除浮动</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">.clearfix:after&#123;</span><br><span class="line">content: <span class="string">&quot;&quot;</span>;</span><br><span class="line">display: block;</span><br><span class="line">height: 0;</span><br><span class="line">line-height: 0;</span><br><span class="line">visibility: hidden;</span><br><span class="line">clear: both;</span><br><span class="line">&#125;</span><br><span class="line">.clearfix&#123;</span><br><span class="line">zoom:1;//兼容IE</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="方法四-使用双伪元素清除浮动"><a href="#方法四-使用双伪元素清除浮动" class="headerlink" title="方法四:使用双伪元素清除浮动"></a>方法四:使用双伪元素清除浮动</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">.clearfix:before,.clearfix:after &#123;</span><br><span class="line">    content: <span class="string">&quot;&quot;</span>;</span><br><span class="line">    display: block;</span><br><span class="line">    clear: both;</span><br><span class="line">&#125;</span><br><span class="line">.clearfix &#123;</span><br><span class="line">    zoom: 1;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>总的来说第一种方法会将超出部分隐藏在某些时候我们想清除浮动并且保留超出部分时做不到,第二种方法会增加许多不必要的标签,第四种不够严谨,所以我们尽量使用第三种方法来清除浮动.</p>]]></content>
      
      
      
        <tags>
            
            <tag> css </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>定位</title>
      <link href="/2022/06/16/%E5%AE%9A%E4%BD%8D/"/>
      <url>/2022/06/16/%E5%AE%9A%E4%BD%8D/</url>
      
        <content type="html"><![CDATA[<h2 id="定位"><a href="#定位" class="headerlink" title="定位"></a>定位</h2><p>Position: left | right | top | bottom</p><h3 id="静态定位"><a href="#静态定位" class="headerlink" title="静态定位"></a>静态定位</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">position:static;</span><br></pre></td></tr></table></figure><p>标准流.</p><h3 id="绝对定位-看脸型"><a href="#绝对定位-看脸型" class="headerlink" title="绝对定位(看脸型)"></a>绝对定位(看脸型)</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">position:absolute;    </span><br></pre></td></tr></table></figure><p>特点:</p><ol><li>自身从浏览器出发.</li><li>绝对定位之后,元素不占位置,会脱标.</li><li>嵌套的盒子,父元素没有给自身绝对定位,子元素绝对定位,子元素从浏览器出发设置自身位置.</li><li>嵌套的盒子,父元素绝对定位,子元素绝对定位,子元素从父元素出发设置自身位置.</li><li>行内元素转成行内块.（不推荐使用）<h3 id="相对定位（自恋型）"><a href="#相对定位（自恋型）" class="headerlink" title="相对定位（自恋型）"></a>相对定位（自恋型）</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">position:relative; </span><br></pre></td></tr></table></figure>特点:</li><li>位置从自身出发.</li><li>设置相对定位之后,还占据原来的位置.</li><li>子绝父相,子元素绝对定位,父元素相对定位.</li><li>嵌套的盒子,父元素相对定位,子元素绝对定位,子元素从父元素出发设置自身位置.</li><li>不能将行内元素转成行内块.<h3 id="固定定位"><a href="#固定定位" class="headerlink" title="固定定位"></a>固定定位</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">position:fixed;   </span><br></pre></td></tr></table></figure>特点:</li><li>位置从浏览器出发.</li><li>不占据原来的位置,会脱标</li><li>可以将行内元素转换为行内块.（不推荐使用）</li></ol><h4 id="实际开发中应该尽量使用标准流-标准流解决不了的使用浮动-浮动解决不了的使用定位"><a href="#实际开发中应该尽量使用标准流-标准流解决不了的使用浮动-浮动解决不了的使用定位" class="headerlink" title="实际开发中应该尽量使用标准流,标准流解决不了的使用浮动,浮动解决不了的使用定位."></a>实际开发中应该尽量使用标准流,标准流解决不了的使用浮动,浮动解决不了的使用定位.</h4>]]></content>
      
      
      
        <tags>
            
            <tag> css </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>变量提升</title>
      <link href="/2022/06/16/%E5%8F%98%E9%87%8F%E6%8F%90%E5%8D%87/"/>
      <url>/2022/06/16/%E5%8F%98%E9%87%8F%E6%8F%90%E5%8D%87/</url>
      
        <content type="html"><![CDATA[<h3 id="Js预解析"><a href="#Js预解析" class="headerlink" title="Js预解析"></a>Js预解析</h3><h4 id="查看语法错误"><a href="#查看语法错误" class="headerlink" title="查看语法错误"></a>查看语法错误</h4><h4 id="变量声明提升和函数整体提升-变量声明提升的时候只提升变量名-不提升变量值"><a href="#变量声明提升和函数整体提升-变量声明提升的时候只提升变量名-不提升变量值" class="headerlink" title="变量声明提升和函数整体提升(变量声明提升的时候只提升变量名,不提升变量值)."></a>变量声明提升和函数整体提升(变量声明提升的时候只提升变量名,不提升变量值).</h4><h3 id="Example"><a href="#Example" class="headerlink" title="Example:"></a>Example:</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">var num = 10;</span><br><span class="line">fun();</span><br><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">fun</span></span>()&#123;</span><br><span class="line">    console.log(num);</span><br><span class="line">    var num = 20;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>打印undefined;虽然内部可以访问到外部的num,但是内部可以找到已经提升的变量名num,所以用内部的,所以打印undefined.</p><h3 id="Example-1"><a href="#Example-1" class="headerlink" title="Example;"></a>Example;</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">f2();</span><br><span class="line">   console.log(cc);</span><br><span class="line">   console.log(bb);</span><br><span class="line">   console.log(aa);</span><br><span class="line">   <span class="keyword">function</span> <span class="function"><span class="title">f2</span></span>()&#123;</span><br><span class="line">       var aa = bb = cc = 9;</span><br><span class="line">       console.log(aa);</span><br><span class="line">       console.log(bb);</span><br><span class="line">       console.log(cc);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>最后打印出9,9,9,9,9 报错,因为bb和cc是全局变量而aa是内部的变量.</p>]]></content>
      
      
      <categories>
          
          <category> 前端知识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>for循环</title>
      <link href="/2022/06/16/for%E5%BE%AA%E7%8E%AF/"/>
      <url>/2022/06/16/for%E5%BE%AA%E7%8E%AF/</url>
      
        <content type="html"><![CDATA[<h3 id="for循环的定义"><a href="#for循环的定义" class="headerlink" title="for循环的定义"></a>for循环的定义</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(语句1;语句2;语句3)&#123;</span><br><span class="line">代码块</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>语句1:在循环（代码块）开始前执行 (可选)<br>语句2:定义运行循环（代码块）的条件,这一部分执行后只会返回true和false (可选)<br>语句3:在循环（代码块）已被执行之后执行 (可选)<br>理论上可以全为空但没有任何实际意义</p><h3 id="for循环方法1"><a href="#for循环方法1" class="headerlink" title="for循环方法1"></a>for循环方法1</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(var i=0;i&lt;arr.length;i++)&#123;</span><br><span class="line">//do something</span><br></pre></td></tr></table></figure><h3 id="for循环方法2"><a href="#for循环方法2" class="headerlink" title="for循环方法2"></a>for循环方法2</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(var i=0,len=arr.length;i&lt;len;i++)&#123;</span><br><span class="line">//do something</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="for循环方法3"><a href="#for循环方法3" class="headerlink" title="for循环方法3"></a>for循环方法3</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">arrs.forEach(<span class="keyword">function</span>(i)&#123;</span><br><span class="line">//do something</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>经过测试几种方法的运行时间: 方法一&gt;方法二&gt;方法三<br>第一种方法经常用,第二种方法常用在伪数组,第三种方法额…只有用jquery中each用过,其他没见过</p><p>今天碰见一段代码是这样的:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(var i=0;i&lt;optArr.length;)&#123;</span><br><span class="line">sel2.appendChild(optArr[i]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>想了很久,终于明白:首先赋值i=0,执行第二个语句,返回true;将optarr数组中的第一个元素取出来,然后放入sel2中,第二轮中仍然取第一个元素,optarr数组中原来的第二个元素变成第一个元素,知道最后optArr.length=0;返回false,跳出循环.appendChild()方法是将一个元素从一个列表向另一个列表移动列表项,这是最方便的办法.</p><p>虽然for循环很简单,也是我们平常的练习的时候经常用到的,但是我们要真正用到极致,还需要更加深入的理解</p>]]></content>
      
      
      
        <tags>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
