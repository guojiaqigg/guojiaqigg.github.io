<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>闭包</title>
      <link href="/2022/06/23/%E9%97%AD%E5%8C%85/"/>
      <url>/2022/06/23/%E9%97%AD%E5%8C%85/</url>
      
        <content type="html"><![CDATA[<h3 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h3><h4 id="闭包定义"><a href="#闭包定义" class="headerlink" title="闭包定义"></a>闭包定义</h4><h5 id="1-犀牛书的定义"><a href="#1-犀牛书的定义" class="headerlink" title="1. 犀牛书的定义"></a>1. 犀牛书的定义</h5><p>   函数变量可以保存在函数作用域内</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params"></span>)&#123;</span><br><span class="line">   <span class="keyword">var</span> n=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(n);</span><br></pre></td></tr></table></figure><h5 id="2-高级程序设计"><a href="#2-高级程序设计" class="headerlink" title="2. 高级程序设计"></a>2. 高级程序设计</h5><p>   闭包是指有权访问另一个函数作用域中等变量的函数(函数没导出);</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params"></span>)&#123;</span><br><span class="line">   <span class="keyword">var</span> n=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">function</span> <span class="title function_">bar</span>(<span class="params"></span>)&#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(n);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="title function_">bar</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">foo</span>();</span><br></pre></td></tr></table></figure><h5 id="3-你不知道的JavaScript"><a href="#3-你不知道的JavaScript" class="headerlink" title="3. 你不知道的JavaScript"></a>3. 你不知道的JavaScript</h5><p>   当函数可以记住并访问所在的此法作用域时，就产生了闭包，即使函数是在当前函数作用域之外执行(函数导出)</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params"></span>)&#123;</span><br><span class="line">   <span class="keyword">var</span> n=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">return</span> <span class="keyword">function</span> <span class="title function_">bar</span>(<span class="params"></span>)&#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(n);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">foo</span>()();</span><br></pre></td></tr></table></figure><h5 id="4-MDN"><a href="#4-MDN" class="headerlink" title="4. MDN"></a>4. MDN</h5><p>   一个函数和对其周围状态（lexical environment，词法环境）的引用捆绑在一起（或者说函数被引用包围），这样的组合就是闭包（closure）</p><h5 id="5-总结"><a href="#5-总结" class="headerlink" title="5. 总结"></a>5. 总结</h5><p>   当函数的执行,导致函数被定义,并抛出;<br>   函数嵌套，函数导出，可访问父函数作用域</p><h4 id="闭包的形式"><a href="#闭包的形式" class="headerlink" title="闭包的形式"></a>闭包的形式</h4><p>从定义出发<br>1.当函数的执行,导致函数被定义<br>2.闭包和函数的定义有关<br>3.this和函数的执行方式有关<br>形式体现</p><ol><li>函数的返回值是函数<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params">fn</span>)&#123;</span><br><span class="line">   <span class="keyword">var</span> n=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">return</span> <span class="keyword">function</span>(<span class="params"></span>)&#123;&#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">foo</span>(test)</span><br></pre></td></tr></table></figure></li><li>返回的变量是函数<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params">fn</span>)&#123;</span><br><span class="line">   <span class="keyword">var</span> n=<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">return</span> n;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">foo</span>()();</span><br></pre></td></tr></table></figure></li><li>全局变量定义的闭包<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> outter;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params">fn</span>)&#123;</span><br><span class="line">   <span class="keyword">var</span> a=<span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">   outter=<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(a);<span class="comment">//10</span></span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">foo</span>()();</span><br><span class="line"><span class="title function_">outter</span>();</span><br></pre></td></tr></table></figure></li><li>函数的参数的方式:<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> inner = <span class="keyword">function</span>(<span class="params">fn</span>)&#123;</span><br><span class="line">   <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">fn</span>())</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params"></span>)&#123;</span><br><span class="line">   <span class="keyword">var</span> b=<span class="string">&#x27;local&#x27;</span>;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">var</span> n=<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">      <span class="keyword">return</span> b;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="title function_">inner</span>(n);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">foo</span>();</span><br></pre></td></tr></table></figure></li></ol><h4 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h4><h5 id="1-循环赋值的问题"><a href="#1-循环赋值的问题" class="headerlink" title="1. 循环赋值的问题"></a>1. 循环赋值的问题</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params"></span>)&#123;</span><br><span class="line">   <span class="keyword">var</span> arr=[];</span><br><span class="line">   <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++)&#123;</span><br><span class="line">      arr[i]=<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">         <span class="variable language_">console</span>.<span class="title function_">log</span>(i);</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">return</span> arr;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> bar=<span class="title function_">foo</span>();</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> j=<span class="number">0</span>;j&lt;<span class="number">10</span>;j++)&#123;</span><br><span class="line">   bar[j]();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//输出10个10</span></span><br></pre></td></tr></table></figure><p>本来的目的是想输出循环的0-9，结果输出了10个10，接下来对函数结构进行改造达到目的</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params"></span>)&#123;</span><br><span class="line">   <span class="keyword">var</span> arr=[];</span><br><span class="line">   <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++)&#123;</span><br><span class="line">      arr[i]=(<span class="keyword">function</span>(<span class="params">j</span>)&#123;</span><br><span class="line">         <span class="keyword">return</span> <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(j)</span><br><span class="line">         &#125;;</span><br><span class="line">      &#125;)(i);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">return</span> arr;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> bar=<span class="title function_">foo</span>();</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> j=<span class="number">0</span>;j&lt;<span class="number">10</span>;j++)&#123;</span><br><span class="line">   bar[j]();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="2-迭代器"><a href="#2-迭代器" class="headerlink" title="2. 迭代器"></a>2. 迭代器</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> add=(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">   <span class="keyword">var</span> count=<span class="number">0</span>;</span><br><span class="line">   <span class="keyword">return</span> <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">      <span class="keyword">return</span> ++count;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;)();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">add</span>());</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>深浅拷贝</title>
      <link href="/2022/06/22/%E6%B7%B1%E6%B5%85%E6%8B%B7%E8%B4%9D/"/>
      <url>/2022/06/22/%E6%B7%B1%E6%B5%85%E6%8B%B7%E8%B4%9D/</url>
      
        <content type="html"><![CDATA[<h3 id="1-为什么需要拷贝"><a href="#1-为什么需要拷贝" class="headerlink" title="1.为什么需要拷贝"></a>1.为什么需要拷贝</h3><p>数值类型的拷贝</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">var</span> b=a;</span><br><span class="line">a=<span class="number">3</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(b);<span class="comment">//1</span></span><br></pre></td></tr></table></figure><p>对象类型的拷贝</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a=&#123;</span><br><span class="line">  <span class="attr">a</span>:<span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> b=a;</span><br><span class="line">a.<span class="property">a</span>=<span class="number">2</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(b);<span class="comment">//&#123;a:2&#125;</span></span><br></pre></td></tr></table></figure><p>我们会发现在对象类型中如果只是简单的赋值，拷贝出来的对象里的值会跟着原对象发生改变，很明显这不是我们需要的效果</p><h4 id="2-拷贝："><a href="#2-拷贝：" class="headerlink" title="2.拷贝："></a>2.拷贝：</h4><h5 id="浅拷贝"><a href="#浅拷贝" class="headerlink" title="浅拷贝"></a>浅拷贝</h5><p>浅拷贝（简单拷贝）拷贝对象的一层</p><p>es3的实现方式</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj=&#123;</span><br><span class="line">  <span class="attr">a</span>:<span class="number">1</span>,</span><br><span class="line">  <span class="attr">b</span>:<span class="number">2</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">simpleClone</span>(<span class="params">obj</span>)&#123;</span><br><span class="line">  <span class="keyword">var</span> cloneObj=&#123;&#125;;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">var</span> i <span class="keyword">in</span> obj)&#123;</span><br><span class="line">    cloneObj[i]=obj[i];</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> cloneObj;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>es6中的实现方式</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj=&#123;</span><br><span class="line">  <span class="attr">a</span>:<span class="number">1</span>,</span><br><span class="line">  <span class="attr">b</span>:<span class="number">2</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">simpleClone</span>(<span class="params">obj</span>)&#123;</span><br><span class="line">  <span class="keyword">var</span> cloneObj=&#123;&#125;;</span><br><span class="line">  <span class="comment">//for(var key of Object.keys(obj))&#123;</span></span><br><span class="line">  <span class="comment">//  cloneObj[key]=obj[key];</span></span><br><span class="line">  <span class="comment">//&#125;</span></span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">var</span> [key,value] <span class="keyword">of</span> <span class="title class_">Object</span>.<span class="title function_">entries</span>(obj))&#123;</span><br><span class="line">    cloneObj[key]=value;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> cloneObj;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>es5中的实现方式</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj=&#123;</span><br><span class="line">  <span class="attr">a</span>:<span class="number">1</span>,</span><br><span class="line">  <span class="attr">b</span>:<span class="number">2</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">simpleClone</span>(<span class="params">obj</span>)&#123;</span><br><span class="line">  <span class="keyword">var</span> cloneObj=&#123;&#125;;</span><br><span class="line">  <span class="title class_">Object</span>.<span class="title function_">getOwnPropertyNames</span>(obj).<span class="title function_">forEach</span>(<span class="keyword">function</span>(<span class="params">key</span>)&#123;</span><br><span class="line">    <span class="keyword">var</span> des=<span class="title class_">Object</span>.<span class="title function_">getOwnPropertyDescriptor</span>(obj,key)</span><br><span class="line">    <span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(cloneObj,key,des)</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">return</span> cloneObj;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="深拷贝"><a href="#深拷贝" class="headerlink" title="深拷贝"></a>深拷贝</h5><p>深拷贝会拷贝原对象里的所有内容</p><ol><li>深拷贝的普通实现<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj=&#123;</span><br><span class="line">  <span class="attr">a</span>:<span class="number">1</span>,</span><br><span class="line">  <span class="attr">b</span>:&#123;</span><br><span class="line">    <span class="attr">c</span>:<span class="number">3</span>,</span><br><span class="line">    <span class="attr">d</span>:&#123;</span><br><span class="line">      <span class="attr">e</span>:<span class="number">5</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">deepClone</span>(<span class="params">obj</span>)&#123;</span><br><span class="line">  <span class="keyword">var</span> cloneObj=&#123;&#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">var</span> i <span class="keyword">in</span> obj)&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">typeof</span> obj[i]===<span class="string">&#x27;object&#x27;</span>&amp;&amp;obj[i]!==<span class="literal">null</span>)&#123;</span><br><span class="line">      cloneObj[i]=&#123;&#125;;</span><br><span class="line">      <span class="keyword">for</span>(<span class="keyword">var</span> j <span class="keyword">in</span> obj[i])&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">typeof</span> obj[i][j]===<span class="string">&#x27;object&#x27;</span>&amp;&amp;obj[i][j]!==<span class="literal">null</span>)&#123;</span><br><span class="line">          cloneObj[i][j]=&#123;&#125;;</span><br><span class="line">          <span class="keyword">for</span>(<span class="keyword">var</span> k <span class="keyword">in</span> obj[i][j])&#123;</span><br><span class="line">            cloneObj[i][j][k]=obj[i][j][k];</span><br><span class="line">          &#125;</span><br><span class="line"></span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">          cloneObj[i][j]=obj[i][j];</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    </span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">      cloneObj[i]=obj[i];</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> cloneObj;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> obj1=<span class="title function_">deepClone</span>(obj);</span><br><span class="line">obj.<span class="property">b</span>.<span class="property">c</span>=<span class="number">10</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj1);</span><br></pre></td></tr></table></figure></li><li>深拷贝的递归实现方式<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj=&#123;</span><br><span class="line">  <span class="attr">a</span>:<span class="number">1</span>,</span><br><span class="line">  <span class="attr">b</span>:&#123;</span><br><span class="line">    <span class="attr">c</span>:<span class="number">3</span>,</span><br><span class="line">    <span class="attr">d</span>:&#123;</span><br><span class="line">      <span class="attr">e</span>:<span class="number">5</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">deepClone</span>(<span class="params">obj,cloneObj</span>)&#123;</span><br><span class="line">  <span class="keyword">var</span> cloneObj=cloneObj||&#123;&#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">var</span> i <span class="keyword">in</span> obj)&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">typeof</span> obj[i]===<span class="string">&#x27;object&#x27;</span>&amp;&amp;obj[i]!==<span class="literal">null</span>)&#123;</span><br><span class="line">      cloneObj[i]=&#123;&#125;;</span><br><span class="line">      <span class="title function_">deepClone</span>(obj[i],cloneObj[i]);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">      cloneObj[i]=obj[i];</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> cloneObj;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> obj1=<span class="title function_">deepClone</span>(obj);</span><br><span class="line">obj.<span class="property">b</span>.<span class="property">c</span>=<span class="number">10</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj1);</span><br></pre></td></tr></table></figure>深拷贝的数组判断<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj=&#123;</span><br><span class="line">  <span class="attr">a</span>:<span class="number">1</span>,</span><br><span class="line">  <span class="attr">b</span>:&#123;</span><br><span class="line">    <span class="attr">c</span>:<span class="number">3</span>,</span><br><span class="line">    <span class="attr">d</span>:&#123;</span><br><span class="line">      <span class="attr">e</span>:<span class="number">5</span>,</span><br><span class="line">      <span class="attr">f</span>:[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">deepClone</span>(<span class="params">obj,cloneObj</span>)&#123;</span><br><span class="line">  <span class="keyword">var</span> cloneObj=cloneObj||&#123;&#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">var</span> i <span class="keyword">in</span> obj)&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">typeof</span> obj[i]===<span class="string">&#x27;object&#x27;</span>&amp;&amp;obj[i]!==<span class="literal">null</span>)&#123;</span><br><span class="line">      <span class="comment">// cloneObj[i]=Array.isArray(obj[i])?[]:&#123;&#125;;</span></span><br><span class="line">      <span class="comment">// cloneObj[i]=obj[i] instanceof Array?[]:&#123;&#125;;</span></span><br><span class="line">      cloneObj[i]=<span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">toString</span>.<span class="title function_">call</span>(obj[i])===<span class="string">&#x27;[object Array]&#x27;</span>?[]:&#123;&#125;;</span><br><span class="line">      <span class="title function_">deepClone</span>(obj[i],cloneObj[i]);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">      cloneObj[i]=obj[i];</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> cloneObj;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> obj1=<span class="title function_">deepClone</span>(obj);</span><br><span class="line">obj.<span class="property">b</span>.<span class="property">c</span>=<span class="number">10</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj1);</span><br></pre></td></tr></table></figure></li><li>深拷贝的不同实现方式<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj=&#123;</span><br><span class="line">  <span class="attr">a</span>:<span class="number">1</span>,</span><br><span class="line">  <span class="attr">b</span>:&#123;</span><br><span class="line">    <span class="attr">c</span>:<span class="number">3</span>,</span><br><span class="line">    <span class="attr">d</span>:&#123;</span><br><span class="line">      <span class="attr">e</span>:<span class="number">5</span>,</span><br><span class="line">      <span class="attr">f</span>:[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//JSON.parse JSON.stringify</span></span><br><span class="line"><span class="comment">// function deepClone(obj)&#123;</span></span><br><span class="line"><span class="comment">//   return JSON.parse(JSON.stringify(obj));</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//jquery</span></span><br><span class="line"><span class="comment">//function deepClone(obj)&#123;</span></span><br><span class="line"><span class="comment">//  return $.extent(true,&#123;&#125;,obj)</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"><span class="keyword">var</span> obj1=<span class="title function_">deepClone</span>(obj);</span><br><span class="line">obj.<span class="property">b</span>.<span class="property">c</span>=<span class="number">10</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj1);</span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>this的四种规则</title>
      <link href="/2022/06/21/this%E7%9A%84%E5%9B%9B%E7%A7%8D%E8%A7%84%E5%88%99/"/>
      <url>/2022/06/21/this%E7%9A%84%E5%9B%9B%E7%A7%8D%E8%A7%84%E5%88%99/</url>
      
        <content type="html"><![CDATA[<h3 id="this的四种规则"><a href="#this的四种规则" class="headerlink" title="this的四种规则"></a>this的四种规则</h3><h4 id="函数的独立调用"><a href="#函数的独立调用" class="headerlink" title="函数的独立调用"></a>函数的独立调用</h4><p>函数的独立调用 this默认指向window/node(相应的全局对象)</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">test</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>===<span class="variable language_">window</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">test</span>();<span class="comment">//true</span></span><br></pre></td></tr></table></figure><h4 id="1-默认绑定规则"><a href="#1-默认绑定规则" class="headerlink" title="1. 默认绑定规则"></a>1. 默认绑定规则</h4><p><code>console.log(this===window); //true </code></p><p>全局里的this指定window</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>===<span class="variable language_">window</span>); <span class="comment">//true </span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(&#123;&#125;===&#123;&#125;);<span class="comment">//false</span></span><br></pre></td></tr></table></figure><h4 id="2-隐式绑定规则"><a href="#2-隐式绑定规则" class="headerlink" title="2. 隐式绑定规则"></a>2. 隐式绑定规则</h4><p>隐式绑定规则-谁调用就指向谁(隐式丢失，参数赋值);</p><ol><li>先来举一个例子<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">var</span> obj=&#123;</span><br><span class="line">  <span class="attr">a</span>:<span class="number">2</span>,</span><br><span class="line">  <span class="attr">foo</span>:<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">obj.<span class="title function_">foo</span>();<span class="comment">//this指向obj</span></span><br></pre></td></tr></table></figure>函数本身有this，函数不执行则this毫无意义，函数执行的时候才会产生this指向，this指向是由当前的执行方式来确定的<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">var</span> obj=&#123;</span><br><span class="line">  <span class="attr">a</span>:<span class="number">2</span>,</span><br><span class="line">  <span class="attr">foo</span>:<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>);<span class="comment">//指向obj</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">test</span>(<span class="params"></span>)&#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">test</span>();<span class="comment">//this指向window，因为是函数的独立调用</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">obj.<span class="title function_">foo</span>();</span><br></pre></td></tr></table></figure></li><li>闭包中的this指向<br>闭包的定义可以理解为当函数执行导致函数被定义并抛出,所以闭包可以理解为一种现象<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">var</span> obj=&#123;</span><br><span class="line">  <span class="attr">a</span>:<span class="number">2</span>,</span><br><span class="line">  <span class="attr">foo</span>:<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>);<span class="comment">//指向obj</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">test</span>(<span class="params"></span>)&#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>);<span class="comment">//this指向window,因为函数独立调用了</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">test</span>();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">obj.<span class="title function_">foo</span>()();</span><br></pre></td></tr></table></figure></li><li>隐式丢失 变量赋值情况<br>如果函数定义了之后被赋值给了变量,则会存在隐式丢失的情况<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> obj=&#123;</span><br><span class="line">  <span class="attr">a</span>:<span class="number">2</span>,</span><br><span class="line">  <span class="attr">foo</span>:foo</span><br><span class="line">&#125;</span><br><span class="line">obj.<span class="title function_">foo</span>()<span class="comment">//this-&gt;obj</span></span><br><span class="line"><span class="keyword">var</span> bar=obj.<span class="property">foo</span>;<span class="comment">//方法被赋值的时候存在隐式丢失</span></span><br><span class="line"><span class="title function_">bar</span>();<span class="comment">//this-&gt;window,还是函数的立即执行</span></span><br></pre></td></tr></table></figure></li><li>参数赋值情况<br>父函数有能力决定子函数的this指向<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>);<span class="comment">//window</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">bar</span>(<span class="params">fn</span>)&#123;</span><br><span class="line">  <span class="comment">//console.log(this);</span></span><br><span class="line">  <span class="title function_">fn</span>();<span class="comment">//函数的独立调用</span></span><br><span class="line">  fn.<span class="title function_">call</span>(obj);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//api接口指定的 文档中指定的obj</span></span><br><span class="line"><span class="keyword">var</span> obj=&#123;</span><br><span class="line">  <span class="attr">a</span>:<span class="number">2</span>,</span><br><span class="line">  <span class="attr">foo</span>:foo</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//预编译过程中，实参被赋值为形参;(值的拷贝过程,浅拷贝)</span></span><br><span class="line"><span class="title function_">bar</span>(obj.<span class="property">foo</span>);<span class="comment">//this-&gt;window</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//回调函数，父函数，子函数，父函数有能力决定子函数的this指向</span></span><br><span class="line"><span class="keyword">var</span> arr=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line">arr.<span class="title function_">forEach</span>(<span class="keyword">function</span>(<span class="params">item,idx,arr</span>)&#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>)</span><br><span class="line">&#125;,obj)</span><br><span class="line">arr.<span class="title function_">sort</span>(<span class="keyword">function</span>(<span class="params">a,b</span>)&#123;</span><br><span class="line">  <span class="keyword">return</span> a-b;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">setInterval</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ol><h4 id="3-显式绑定规则"><a href="#3-显式绑定规则" class="headerlink" title="3. 显式绑定规则"></a>3. 显式绑定规则</h4><p><strong>call,apply,bind</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span>(<span class="params">a,b,c</span>)&#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(a,b,c)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> obj=&#123;</span><br><span class="line">  <span class="attr">a</span>:<span class="number">2</span>,</span><br><span class="line">  <span class="attr">foo</span>:foo</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> bar=obj.<span class="property">foo</span></span><br><span class="line"></span><br><span class="line">obj.<span class="title function_">foo</span>(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>)<span class="comment">//1,2,3</span></span><br><span class="line">bar.<span class="title function_">call</span>(obj,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>)<span class="comment">//1,2,3</span></span><br><span class="line">bar.<span class="title function_">apply</span>(obj,[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>])<span class="comment">//1,2,3</span></span><br><span class="line">bar.<span class="title function_">call</span>(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>)<span class="comment">//this-&gt;Number &#123;1&#125;//2,3</span></span><br><span class="line">bar.<span class="title function_">apply</span>(<span class="literal">undefined</span>,[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>])<span class="comment">//undefined,null没有包装类,绑定失败，调用默认this执行window</span></span><br><span class="line">bar.<span class="title function_">bind</span>(obj)(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>)<span class="comment">//1,2,3</span></span><br></pre></td></tr></table></figure><h4 id="4-new绑定规则"><a href="#4-new绑定规则" class="headerlink" title="4. new绑定规则"></a>4. new绑定规则</h4><p>this指向实例化对象</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="comment">//var this=&#123;&#125;;</span></span><br><span class="line">  <span class="comment">//this.a=1;</span></span><br><span class="line">  <span class="comment">//return this;</span></span><br><span class="line">  <span class="comment">//return的值为引用值会改变this指向</span></span><br><span class="line">  <span class="keyword">return</span> &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> person=<span class="keyword">new</span> <span class="title class_">Person</span>();</span><br></pre></td></tr></table></figure><h4 id="5-优先级"><a href="#5-优先级" class="headerlink" title="5. 优先级"></a>5. 优先级</h4><p><strong>new绑定&gt;显式绑定&gt;隐式绑定&gt;默认绑定</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj=&#123;</span><br><span class="line">  <span class="attr">a</span>:<span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line">(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>);</span><br><span class="line">&#125;).<span class="title function_">call</span>(obj)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> this </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>相等运算符</title>
      <link href="/2022/06/20/%E7%9B%B8%E7%AD%89%E8%BF%90%E7%AE%97%E7%AC%A6/"/>
      <url>/2022/06/20/%E7%9B%B8%E7%AD%89%E8%BF%90%E7%AE%97%E7%AC%A6/</url>
      
        <content type="html"><![CDATA[<h3 id="“-”"><a href="#“-”" class="headerlink" title="“==”"></a>“==”</h3><p>​        使用==时，不同类型的值也可以被看作相等。这样的结果可能会使那些资深的 JavaScript 开发者都感到困惑。我们用下面的表格给大家分析一下不同类型的值用相等运算符比较后的结果。</p><table><thead><tr><th align="center">类型（x）</th><th align="center">类型（y）</th><th align="center">结 果</th></tr></thead><tbody><tr><td align="center">null</td><td align="center">undefined</td><td align="center">true</td></tr><tr><td align="center">undefined</td><td align="center">null</td><td align="center">true</td></tr><tr><td align="center">数</td><td align="center">字符串</td><td align="center">x == toNumber(y)</td></tr><tr><td align="center">字符串</td><td align="center">数</td><td align="center">toNumber(x) == y</td></tr><tr><td align="center">布尔值</td><td align="center">任何类型</td><td align="center">toNumber(x) == y</td></tr><tr><td align="center">任何类型</td><td align="center">布尔值</td><td align="center">x == toNumber(y)</td></tr><tr><td align="center">字符串或数</td><td align="center">对象</td><td align="center">x == toPrimitive(y)</td></tr><tr><td align="center">对象</td><td align="center">字符串或数</td><td align="center">toPrimitive(x) == y</td></tr></tbody></table><p>如果 x 和 y 的类型相同，JavaScript 会用 equals 方法比较这两个值或对象。没有列在这个表格中的其他情况都会返回 false。</p><p><strong>toNumber</strong>和 <strong>toPrimitive</strong>方法是内部的，并根据以下表格对其进行估值。</p><h4 id="toNumber"><a href="#toNumber" class="headerlink" title="toNumber"></a>toNumber</h4><p>toNumber 方法对不同类型返回的结果如下。</p><table><thead><tr><th align="center">值类型</th><th align="center">结 果</th></tr></thead><tbody><tr><td align="center">undefined</td><td align="center">NAN</td></tr><tr><td align="center">null</td><td align="center">+0</td></tr><tr><td align="center">布尔值</td><td align="center">如果是true,返回1;如果是false返回+0</td></tr><tr><td align="center">数</td><td align="center">数对应的值</td></tr></tbody></table><h4 id="toPrimitive"><a href="#toPrimitive" class="headerlink" title="toPrimitive"></a>toPrimitive</h4><p>toPrimitive 方法对不同类型返回的结果如下。</p><table><thead><tr><th align="center">值类型</th><th align="center">结 果</th></tr></thead><tbody><tr><td align="center">对象</td><td align="center">如果对象的 valueOf 方法的结果是原始值，返回原始值；如果对象的 toString 方法返回</td></tr></tbody></table><p>用例子来验证一下表格中的结果。首先，我们知道下面的代码输出 true（字符串长度大于 1）。</p><p><code>console.log(&#39;packt&#39; ? true : false); </code></p><p>那么下面这行代码的结果呢？</p><p><code>console.log(&#39;packt&#39; == true); </code></p><p>输出是 false，为什么会这样呢？</p><p>​    首先，布尔值会被 toNumber 方法转成数，因此得到 packt == 1。 </p><p>​    其次，用 toNumber 转换字符串值。因为字符串包含字母，所以会被转成 NaN，表达式就变成了 NaN == 1，结果就是 false。</p><p>那么下面这行代码的结果呢？</p><p><code>console.log(&#39;packt&#39; == false); </code></p><p>输出也是 false，为什么呢？</p><p>​    首先，布尔值会被 toNumber 方法转成数，因此得到 packt == 0。 </p><p>​    其次，用 toNumber 转换字符串值。因为字符串包含字母，所以会被转成 NaN，表达式就变成了 NaN == 0，结果就是 false。</p><h3 id="“-”-1"><a href="#“-”-1" class="headerlink" title="“===”"></a>“===”</h3><p>那么===运算符呢？简单多了。如果比较的两个值类型不同，比较的结果就是 false。如果比较的两个值类型相同，结果会根据下表判断。</p><table><thead><tr><th align="center">类型（x）</th><th align="center">值</th><th align="center">结 果</th></tr></thead><tbody><tr><td align="center">数</td><td align="center">x 和 y 的值相同（但不是 NaN）</td><td align="center">true</td></tr><tr><td align="center">字符串</td><td align="center">x 和 y 是相同的字符</td><td align="center">true</td></tr><tr><td align="center">布尔值</td><td align="center">x 和 y 都是 true 或 false</td><td align="center">true</td></tr><tr><td align="center">对象</td><td align="center">x 和 y 引用同一个对象</td><td align="center">true</td></tr></tbody></table><p>如果 x 和 y 类型不同，结果就是 false。我们来看一些例子。</p><p><code>console.log(&#39;packt&#39; === true); // false </code></p><p>如果 x 和 y 类型不同，结果就是 false。我们来看一些例子。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;packt&#x27;</span> === <span class="literal">true</span>); <span class="comment">// false </span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;packt&#x27;</span> === <span class="string">&#x27;packt&#x27;</span>); <span class="comment">// true </span></span><br><span class="line"><span class="keyword">var</span> person1 = &#123;<span class="attr">name</span>:<span class="string">&#x27;John&#x27;</span>&#125;; </span><br><span class="line"><span class="keyword">var</span> person2 = &#123;<span class="attr">name</span>:<span class="string">&#x27;John&#x27;</span>&#125;; </span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(person1 === person2); <span class="comment">// false，不同的对象</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> JS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DOM部分方法精解</title>
      <link href="/2022/06/16/DOM%E9%83%A8%E5%88%86%E6%96%B9%E6%B3%95%E7%B2%BE%E8%A7%A3/"/>
      <url>/2022/06/16/DOM%E9%83%A8%E5%88%86%E6%96%B9%E6%B3%95%E7%B2%BE%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<h3 id="appendChild"><a href="#appendChild" class="headerlink" title="appendChild()"></a>appendChild()</h3><p>appendChild() 方法可向节点的子节点列表的末尾添加新的子节点.</p><p>提示：如果文档树中已经存在了newchild,它将从文档树中删除,然后重新插入它的新位置.如果newchild是DocumentFragment节点,则不会直接插入它,而是把它的子节点按序插入当前节点的 childNodes[] 数组的末尾.</p><p>通常情况下使用appendChild()方法转移某个列表项到另一个列表项.</p><h3 id="children"><a href="#children" class="headerlink" title="children"></a>children</h3><p>var children = node.children</p><p>返回一个HTMLCollection而非数组;HTMLCollection是DOM的子元素的一个活的有序集合node;可以通过Array.from()方法转换为数组;可以通过使用集合上的item()方法或使用JavaScript数组样式表示法来访问集合中的单个子节点.</p><p>如果该节点没有子元素,则children是一个空的列表length为0.</p>]]></content>
      
      
      
        <tags>
            
            <tag> JS DOM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>阻止浏览器默认行为</title>
      <link href="/2022/06/16/%E9%98%BB%E6%AD%A2%E6%B5%8F%E8%A7%88%E5%99%A8%E9%BB%98%E8%AE%A4%E8%A1%8C%E4%B8%BA/"/>
      <url>/2022/06/16/%E9%98%BB%E6%AD%A2%E6%B5%8F%E8%A7%88%E5%99%A8%E9%BB%98%E8%AE%A4%E8%A1%8C%E4%B8%BA/</url>
      
        <content type="html"><![CDATA[<h3 id="js阻止浏览器默认行为"><a href="#js阻止浏览器默认行为" class="headerlink" title="js阻止浏览器默认行为"></a>js阻止浏览器默认行为</h3><p>三种阻止事件执行的方式<br>1.event.preventDefault()<br>2.event.stopPropagation()<br>3.return false<br>event.preventDefault() 阻止特定事件的默认行为（只有 cancelable 设置为 true 的事件才可以使用），比如：点击 type=”submit” 的 input 标签提交表单，你在 onclick 事件处理中调用<br>event.preventDefault()方法， 那么在点击 submit 后就不会自动提交表单了。但是并不阻止事件冒泡。event.stopPropagation() 立即停止事件在 DOM 层次中的传播，即阻止事件冒泡。但是，并不阻止默认行为。<br>return false 之后的所有相关的触发事件和动作都不会被执行。阻止事件继续传播，事件冒泡和默认行为都被阻止。</p>]]></content>
      
      
      
        <tags>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>事件委托</title>
      <link href="/2022/06/16/%E4%BA%8B%E4%BB%B6%E5%A7%94%E6%89%98/"/>
      <url>/2022/06/16/%E4%BA%8B%E4%BB%B6%E5%A7%94%E6%89%98/</url>
      
        <content type="html"><![CDATA[<h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><p>一般来讲,会把一个或者一组元素的事件委托到它的父层或者更外层元素上,真正绑定事件的是外层元素,当事件响应到需要绑定的元素上时,会通过事件冒泡机制从而触发它的外层元素的绑定事件上,然后在外层元素上去执行函数.</p><h3 id="举个栗子"><a href="#举个栗子" class="headerlink" title="举个栗子"></a>举个栗子</h3><p>有三个同事要收快递,为了签收快递,有两种办法：一是三个人在公司门口等快递；二是委托收快递事件给前台代为签收.前台收到快递后,他会判断收件人是谁,然后按照收件人的要求签收,甚至代为付款.第二种方案还有一个优势,那就是即使公司里来了新员工,前台也会在收到其快递后核实并代为签收.</p><h3 id="优势"><a href="#优势" class="headerlink" title="优势"></a>优势</h3><p>所有的人都在公司门口等待签收,门口站不下,页面所有元素使用一个事件,页面受不了,既然是同一个事情,为了方便,就把这个事情委托给一个最合适的人去干,公司通畅,页面舒服.</p><h3 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;<span class="built_in">head</span> lang=<span class="string">&quot;en&quot;</span>&gt;</span><br><span class="line">    &lt;meta charset=<span class="string">&quot;UTF-8&quot;</span>&gt;</span><br><span class="line">    &lt;title&gt;&lt;/title&gt;</span><br><span class="line">    &lt;style&gt;</span><br><span class="line">        li &#123;</span><br><span class="line">            height: 30px;</span><br><span class="line">            line-height: 30px;</span><br><span class="line">            margin: 3px 0;</span><br><span class="line">            background-color: red;</span><br><span class="line">            cursor: pointer;</span><br><span class="line">        &#125;</span><br><span class="line">    &lt;/style&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;button&gt;创建4个移民li&lt;/button&gt;</span><br><span class="line">&lt;ul&gt;</span><br><span class="line">    &lt;li&gt;我是土著li&lt;/li&gt;</span><br><span class="line">    &lt;a href=<span class="string">&quot;#&quot;</span>&gt;我是土著li&lt;/a&gt;</span><br><span class="line">    &lt;li&gt;我是土著li&lt;/li&gt;</span><br><span class="line">    &lt;li&gt;我是土著li&lt;/li&gt;</span><br><span class="line">    &lt;a href=<span class="string">&quot;#&quot;</span>&gt;我是土著li&lt;/a&gt;</span><br><span class="line">    &lt;li&gt;我是土著li&lt;/li&gt;</span><br><span class="line">&lt;/ul&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    var liArr = document.getElementsByTagName(<span class="string">&quot;li&quot;</span>);</span><br><span class="line">    var ul = document.getElementsByTagName(<span class="string">&quot;ul&quot;</span>)[0];</span><br><span class="line">    var btn = document.getElementsByTagName(<span class="string">&quot;button&quot;</span>)[0];</span><br><span class="line">//    <span class="keyword">for</span>(var i=0;i&lt;liArr.length;i++)&#123;</span><br><span class="line">//        liArr[i].onclick = <span class="function"><span class="title">function</span></span> () &#123;</span><br><span class="line">//            alert(<span class="string">&quot;我是土著li&quot;</span>);</span><br><span class="line">//        &#125;</span><br><span class="line">//    &#125;</span><br><span class="line">    btn.onclick = <span class="function"><span class="title">function</span></span> () &#123;</span><br><span class="line">        <span class="keyword">for</span>(var i=1;i&lt;=4;i++)&#123;</span><br><span class="line">            var newLi = document.createElement(<span class="string">&quot;li&quot;</span>);</span><br><span class="line">            var newA = document.createElement(<span class="string">&quot;a&quot;</span>);</span><br><span class="line">            newLi.innerHTML = <span class="string">&quot;我是移民li&quot;</span>;</span><br><span class="line">            newA.innerHTML = <span class="string">&quot;我是移民a&quot;</span>;</span><br><span class="line">            newA.href = <span class="string">&quot;#&quot;</span>;</span><br><span class="line">            ul.appendChild(newLi);</span><br><span class="line">            ul.appendChild(newA);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    //普通的事件绑定,没有办法为新创建的元素绑定事件.所以我们要使用冒泡的特性,事件委托！</span><br><span class="line">    //事件委托</span><br><span class="line">    ul.onclick = <span class="keyword">function</span> (event) &#123;</span><br><span class="line">        //获取事件触动的时候传递过来的值</span><br><span class="line">        event = event || window.event;</span><br><span class="line">        var aaa = event.target?event.target:event.srcElement;</span><br><span class="line">        //判断标签名,如果是li标签弹窗</span><br><span class="line">        <span class="keyword">if</span>(aaa.tagName === <span class="string">&quot;LI&quot;</span>)&#123;</span><br><span class="line">            alert(<span class="string">&quot;我是li&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>事件委托是利用冒泡的特性实现的,适合使用的事件有：click,mousedown,mouseup,keydown,keyup,keypress.</p>]]></content>
      
      
      
        <tags>
            
            <tag> DOM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>清除浮动</title>
      <link href="/2022/06/16/%E6%B8%85%E9%99%A4%E6%B5%AE%E5%8A%A8/"/>
      <url>/2022/06/16/%E6%B8%85%E9%99%A4%E6%B5%AE%E5%8A%A8/</url>
      
        <content type="html"><![CDATA[<h2 id="浮动问题的产生"><a href="#浮动问题的产生" class="headerlink" title="浮动问题的产生:"></a>浮动问题的产生:</h2><pre><code>父盒子没有设置height,子盒子在父盒子中进行了float,那么由于父盒子的高度为0,下面的元素会自动补位,解决由于补位产生的问题叫浮动清除.</code></pre><h2 id="清除浮动的方式"><a href="#清除浮动的方式" class="headerlink" title="清除浮动的方式:"></a>清除浮动的方式:</h2><h3 id="方式一-使用overflow属性来清除浮动"><a href="#方式一-使用overflow属性来清除浮动" class="headerlink" title="方式一:使用overflow属性来清除浮动"></a>方式一:使用overflow属性来清除浮动</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">.clearfix&#123;</span><br><span class="line">overflow:hidden;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>先找到浮动盒子的父元素,再在父元素中添加一个属性:overflow:hidden,就是清除这个父元素中的子元素浮动对页面的负面影响.</p><p>PS:一般情况下也不会使用这种方式,因为overflow:hidden有可能造成新的问题,将不该隐藏的地方隐藏.</p><h3 id="方式二-使用额外标签法"><a href="#方式二-使用额外标签法" class="headerlink" title="方式二:使用额外标签法"></a>方式二:使用额外标签法</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">.clearfix&#123;</span><br><span class="line">　　 clear:both;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在浮动的盒子之下再放一个标签,在这个标签中使用clear:both,来清除浮动对页面的影响.</p><p>内部标签:会将这个浮动盒子的父盒子高度重新撑开.</p><p>外部标签:会将这个浮动盒子的影响清除,但是不会撑开父盒子.</p><p>PS:一般情况下不使用,因为这种清除浮动的方式会增加页面的标签,造成结构的混乱.</p><h3 id="方法三-使用伪类元素来清除浮动"><a href="#方法三-使用伪类元素来清除浮动" class="headerlink" title="方法三:使用伪类元素来清除浮动"></a>方法三:使用伪类元素来清除浮动</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">.clearfix:after&#123;</span><br><span class="line">content: <span class="string">&quot;&quot;</span>;</span><br><span class="line">display: block;</span><br><span class="line">height: 0;</span><br><span class="line">line-height: 0;</span><br><span class="line">visibility: hidden;</span><br><span class="line">clear: both;</span><br><span class="line">&#125;</span><br><span class="line">.clearfix&#123;</span><br><span class="line">zoom:1;//兼容IE</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="方法四-使用双伪元素清除浮动"><a href="#方法四-使用双伪元素清除浮动" class="headerlink" title="方法四:使用双伪元素清除浮动"></a>方法四:使用双伪元素清除浮动</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">.clearfix:before,.clearfix:after &#123;</span><br><span class="line">    content: <span class="string">&quot;&quot;</span>;</span><br><span class="line">    display: block;</span><br><span class="line">    clear: both;</span><br><span class="line">&#125;</span><br><span class="line">.clearfix &#123;</span><br><span class="line">    zoom: 1;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>总的来说第一种方法会将超出部分隐藏在某些时候我们想清除浮动并且保留超出部分时做不到,第二种方法会增加许多不必要的标签,第四种不够严谨,所以我们尽量使用第三种方法来清除浮动.</p>]]></content>
      
      
      
        <tags>
            
            <tag> css </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>定位</title>
      <link href="/2022/06/16/%E5%AE%9A%E4%BD%8D/"/>
      <url>/2022/06/16/%E5%AE%9A%E4%BD%8D/</url>
      
        <content type="html"><![CDATA[<h2 id="定位"><a href="#定位" class="headerlink" title="定位"></a>定位</h2><p>Position: left | right | top | bottom</p><h3 id="静态定位"><a href="#静态定位" class="headerlink" title="静态定位"></a>静态定位</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">position:static;</span><br></pre></td></tr></table></figure><p>标准流.</p><h3 id="绝对定位-看脸型"><a href="#绝对定位-看脸型" class="headerlink" title="绝对定位(看脸型)"></a>绝对定位(看脸型)</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">position:absolute;    </span><br></pre></td></tr></table></figure><p>特点:</p><ol><li>自身从浏览器出发.</li><li>绝对定位之后,元素不占位置,会脱标.</li><li>嵌套的盒子,父元素没有给自身绝对定位,子元素绝对定位,子元素从浏览器出发设置自身位置.</li><li>嵌套的盒子,父元素绝对定位,子元素绝对定位,子元素从父元素出发设置自身位置.</li><li>行内元素转成行内块.（不推荐使用）<h3 id="相对定位（自恋型）"><a href="#相对定位（自恋型）" class="headerlink" title="相对定位（自恋型）"></a>相对定位（自恋型）</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">position:relative; </span><br></pre></td></tr></table></figure>特点:</li><li>位置从自身出发.</li><li>设置相对定位之后,还占据原来的位置.</li><li>子绝父相,子元素绝对定位,父元素相对定位.</li><li>嵌套的盒子,父元素相对定位,子元素绝对定位,子元素从父元素出发设置自身位置.</li><li>不能将行内元素转成行内块.<h3 id="固定定位"><a href="#固定定位" class="headerlink" title="固定定位"></a>固定定位</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">position:fixed;   </span><br></pre></td></tr></table></figure>特点:</li><li>位置从浏览器出发.</li><li>不占据原来的位置,会脱标</li><li>可以将行内元素转换为行内块.（不推荐使用）</li></ol><h4 id="实际开发中应该尽量使用标准流-标准流解决不了的使用浮动-浮动解决不了的使用定位"><a href="#实际开发中应该尽量使用标准流-标准流解决不了的使用浮动-浮动解决不了的使用定位" class="headerlink" title="实际开发中应该尽量使用标准流,标准流解决不了的使用浮动,浮动解决不了的使用定位."></a>实际开发中应该尽量使用标准流,标准流解决不了的使用浮动,浮动解决不了的使用定位.</h4>]]></content>
      
      
      
        <tags>
            
            <tag> css </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>变量提升</title>
      <link href="/2022/06/16/%E5%8F%98%E9%87%8F%E6%8F%90%E5%8D%87/"/>
      <url>/2022/06/16/%E5%8F%98%E9%87%8F%E6%8F%90%E5%8D%87/</url>
      
        <content type="html"><![CDATA[<h3 id="Js预解析"><a href="#Js预解析" class="headerlink" title="Js预解析"></a>Js预解析</h3><h4 id="查看语法错误"><a href="#查看语法错误" class="headerlink" title="查看语法错误"></a>查看语法错误</h4><h4 id="变量声明提升和函数整体提升-变量声明提升的时候只提升变量名-不提升变量值"><a href="#变量声明提升和函数整体提升-变量声明提升的时候只提升变量名-不提升变量值" class="headerlink" title="变量声明提升和函数整体提升(变量声明提升的时候只提升变量名,不提升变量值)."></a>变量声明提升和函数整体提升(变量声明提升的时候只提升变量名,不提升变量值).</h4><h3 id="Example"><a href="#Example" class="headerlink" title="Example:"></a>Example:</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">var num = 10;</span><br><span class="line">fun();</span><br><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">fun</span></span>()&#123;</span><br><span class="line">    console.log(num);</span><br><span class="line">    var num = 20;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>打印undefined;虽然内部可以访问到外部的num,但是内部可以找到已经提升的变量名num,所以用内部的,所以打印undefined.</p><h3 id="Example-1"><a href="#Example-1" class="headerlink" title="Example;"></a>Example;</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">f2();</span><br><span class="line">   console.log(cc);</span><br><span class="line">   console.log(bb);</span><br><span class="line">   console.log(aa);</span><br><span class="line">   <span class="keyword">function</span> <span class="function"><span class="title">f2</span></span>()&#123;</span><br><span class="line">       var aa = bb = cc = 9;</span><br><span class="line">       console.log(aa);</span><br><span class="line">       console.log(bb);</span><br><span class="line">       console.log(cc);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>最后打印出9,9,9,9,9 报错,因为bb和cc是全局变量而aa是内部的变量.</p>]]></content>
      
      
      <categories>
          
          <category> 前端知识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>for循环</title>
      <link href="/2022/06/16/for%E5%BE%AA%E7%8E%AF/"/>
      <url>/2022/06/16/for%E5%BE%AA%E7%8E%AF/</url>
      
        <content type="html"><![CDATA[<h3 id="for循环的定义"><a href="#for循环的定义" class="headerlink" title="for循环的定义"></a>for循环的定义</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(语句1;语句2;语句3)&#123;</span><br><span class="line">代码块</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>语句1:在循环（代码块）开始前执行 (可选)<br>语句2:定义运行循环（代码块）的条件,这一部分执行后只会返回true和false (可选)<br>语句3:在循环（代码块）已被执行之后执行 (可选)<br>理论上可以全为空但没有任何实际意义</p><h3 id="for循环方法1"><a href="#for循环方法1" class="headerlink" title="for循环方法1"></a>for循环方法1</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(var i=0;i&lt;arr.length;i++)&#123;</span><br><span class="line">//do something</span><br></pre></td></tr></table></figure><h3 id="for循环方法2"><a href="#for循环方法2" class="headerlink" title="for循环方法2"></a>for循环方法2</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(var i=0,len=arr.length;i&lt;len;i++)&#123;</span><br><span class="line">//do something</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="for循环方法3"><a href="#for循环方法3" class="headerlink" title="for循环方法3"></a>for循环方法3</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">arrs.forEach(<span class="keyword">function</span>(i)&#123;</span><br><span class="line">//do something</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>经过测试几种方法的运行时间: 方法一&gt;方法二&gt;方法三<br>第一种方法经常用,第二种方法常用在伪数组,第三种方法额…只有用jquery中each用过,其他没见过</p><p>今天碰见一段代码是这样的:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(var i=0;i&lt;optArr.length;)&#123;</span><br><span class="line">sel2.appendChild(optArr[i]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>想了很久,终于明白:首先赋值i=0,执行第二个语句,返回true;将optarr数组中的第一个元素取出来,然后放入sel2中,第二轮中仍然取第一个元素,optarr数组中原来的第二个元素变成第一个元素,知道最后optArr.length=0;返回false,跳出循环.appendChild()方法是将一个元素从一个列表向另一个列表移动列表项,这是最方便的办法.</p><p>虽然for循环很简单,也是我们平常的练习的时候经常用到的,但是我们要真正用到极致,还需要更加深入的理解</p>]]></content>
      
      
      
        <tags>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
